/*------------------------------------------------------------------------------
 * 文件名   : hex_encode_impl.hpp
 * 创建人   : rosan 
 * 创建时间 : 2013.10.14
 * 文件描述 : hex_encode.hpp的实现文件
 * 版权声明 : Copyright(c)2013 BroadInter.All rights reserved.
 -----------------------------------------------------------------------------*/ 
#ifndef HEADER_HEX_ENCODE_IMPL
#define HEADER_HEX_ENCODE_IMPL

namespace BroadCache
{

/*------------------------------------------------------------------------------
 * 描  述: 将一个字符的4位(低4位或高4位)转换成16进制的字符
 * 参  数: [in] ch 字符的4位(低4位或高4位)
 *         [in] lower_case 是否是转换成16进制的小写字符
 * 返回值: 转换后的16进制字符
 * 修  改:
 *   时间 2013.10.14
 *   作者 rosan
 *   描述 创建
 -----------------------------------------------------------------------------*/ 
inline char ToHex(char ch, bool lower_case = false)
{
    static const char kTable[2][16] = {
        { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'},
        { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'} };

    return kTable[!lower_case][ch & 0xf];          
}

/*------------------------------------------------------------------------------
 * 描  述: 将一个16进制的字符转换成4位的字符
 * 参  数: [in] ch 被转换的16进制字符
 * 返回值: 转换后的4位字符
 * 修  改:
 *   时间 2013.10.14
 *   作者 rosan
 *   描述 创建
 -----------------------------------------------------------------------------*/ 
inline char FromHex(char ch)
{
    static const char kTable[128] = {
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, //0x00
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, //0x10
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, //0x20
         0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, //0x30 
         0,10,11,12,13,14,15, 0, 0, 0, 0, 0, 0, 0, 0, 0, //0x40
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, //0x50
         0,10,11,12,13,14,15, 0, 0, 0, 0, 0, 0, 0, 0, 0, //0x60
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}; //0x70

    return kTable[ch & 0x7f];  
}

/*------------------------------------------------------------------------------
 * 描  述: 判断一个字符在url编码中是否是合法的字符
 *         一般不可打印的和url中有特殊含义字符都是非法的，必须进行转译
 * 参  数: [in] ch 被判断的字符
 * 返回值: 是否是合法的url字符
 * 修  改:
 *   时间 2013.10.14
 *   作者 rosan
 *   描述 创建
 -----------------------------------------------------------------------------*/ 
inline char IsNormalChar(char ch)
{
    static const char kTable[128] = {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, //0x00
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, //0x10
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, //0x20
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, //0x30
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, //0x40
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, //0x50
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, //0x60
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0}; //0x70

    return kTable[ch & 0x7f]; 
}

}

#endif  // HEADER_HEX_ENCODE_IMPL
