// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto.proto

#ifndef PROTOBUF_proto_2eproto__INCLUDED
#define PROTOBUF_proto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace proto_type {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_2eproto();
void protobuf_AssignDesc_proto_2eproto();
void protobuf_ShutdownFile_proto_2eproto();

class Info;
class Info_SessionInfo;
class Info_TorrentInfo;
class Info_PeerInfo;
class Info_SystemInfo;
class Info_SystemInfo_CpuInfo;
class Info_SystemInfo_DiskInfo;
class Info_SystemInfo_NetInfo;
class Info_CacheStatusInfo;
class Command;

// ===================================================================

class Info_SessionInfo : public ::google::protobuf::Message {
 public:
  Info_SessionInfo();
  virtual ~Info_SessionInfo();
  
  Info_SessionInfo(const Info_SessionInfo& from);
  
  inline Info_SessionInfo& operator=(const Info_SessionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Info_SessionInfo& default_instance();
  
  void Swap(Info_SessionInfo* other);
  
  // implements Message ----------------------------------------------
  
  Info_SessionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Info_SessionInfo& from);
  void MergeFrom(const Info_SessionInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string session_type = 1;
  inline bool has_session_type() const;
  inline void clear_session_type();
  static const int kSessionTypeFieldNumber = 1;
  inline const ::std::string& session_type() const;
  inline void set_session_type(const ::std::string& value);
  inline void set_session_type(const char* value);
  inline void set_session_type(const char* value, size_t size);
  inline ::std::string* mutable_session_type();
  inline ::std::string* release_session_type();
  
  // required uint32 torrent_num = 2;
  inline bool has_torrent_num() const;
  inline void clear_torrent_num();
  static const int kTorrentNumFieldNumber = 2;
  inline ::google::protobuf::uint32 torrent_num() const;
  inline void set_torrent_num(::google::protobuf::uint32 value);
  
  // required uint32 peer_num = 3;
  inline bool has_peer_num() const;
  inline void clear_peer_num();
  static const int kPeerNumFieldNumber = 3;
  inline ::google::protobuf::uint32 peer_num() const;
  inline void set_peer_num(::google::protobuf::uint32 value);
  
  // required uint64 upload_bandwidth = 4;
  inline bool has_upload_bandwidth() const;
  inline void clear_upload_bandwidth();
  static const int kUploadBandwidthFieldNumber = 4;
  inline ::google::protobuf::uint64 upload_bandwidth() const;
  inline void set_upload_bandwidth(::google::protobuf::uint64 value);
  
  // required uint64 download_bandwidth = 5;
  inline bool has_download_bandwidth() const;
  inline void clear_download_bandwidth();
  static const int kDownloadBandwidthFieldNumber = 5;
  inline ::google::protobuf::uint64 download_bandwidth() const;
  inline void set_download_bandwidth(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:proto_type.Info.SessionInfo)
 private:
  inline void set_has_session_type();
  inline void clear_has_session_type();
  inline void set_has_torrent_num();
  inline void clear_has_torrent_num();
  inline void set_has_peer_num();
  inline void clear_has_peer_num();
  inline void set_has_upload_bandwidth();
  inline void clear_has_upload_bandwidth();
  inline void set_has_download_bandwidth();
  inline void clear_has_download_bandwidth();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* session_type_;
  ::google::protobuf::uint32 torrent_num_;
  ::google::protobuf::uint32 peer_num_;
  ::google::protobuf::uint64 upload_bandwidth_;
  ::google::protobuf::uint64 download_bandwidth_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_proto_2eproto();
  friend void protobuf_AssignDesc_proto_2eproto();
  friend void protobuf_ShutdownFile_proto_2eproto();
  
  void InitAsDefaultInstance();
  static Info_SessionInfo* default_instance_;
};
// -------------------------------------------------------------------

class Info_TorrentInfo : public ::google::protobuf::Message {
 public:
  Info_TorrentInfo();
  virtual ~Info_TorrentInfo();
  
  Info_TorrentInfo(const Info_TorrentInfo& from);
  
  inline Info_TorrentInfo& operator=(const Info_TorrentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Info_TorrentInfo& default_instance();
  
  void Swap(Info_TorrentInfo* other);
  
  // implements Message ----------------------------------------------
  
  Info_TorrentInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Info_TorrentInfo& from);
  void MergeFrom(const Info_TorrentInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string info_hash = 1;
  inline bool has_info_hash() const;
  inline void clear_info_hash();
  static const int kInfoHashFieldNumber = 1;
  inline const ::std::string& info_hash() const;
  inline void set_info_hash(const ::std::string& value);
  inline void set_info_hash(const char* value);
  inline void set_info_hash(const char* value, size_t size);
  inline ::std::string* mutable_info_hash();
  inline ::std::string* release_info_hash();
  
  // required uint32 complete_precent = 2;
  inline bool has_complete_precent() const;
  inline void clear_complete_precent();
  static const int kCompletePrecentFieldNumber = 2;
  inline ::google::protobuf::uint32 complete_precent() const;
  inline void set_complete_precent(::google::protobuf::uint32 value);
  
  // required uint32 inner_peer_num = 3;
  inline bool has_inner_peer_num() const;
  inline void clear_inner_peer_num();
  static const int kInnerPeerNumFieldNumber = 3;
  inline ::google::protobuf::uint32 inner_peer_num() const;
  inline void set_inner_peer_num(::google::protobuf::uint32 value);
  
  // required uint32 outer_peer_num = 4;
  inline bool has_outer_peer_num() const;
  inline void clear_outer_peer_num();
  static const int kOuterPeerNumFieldNumber = 4;
  inline ::google::protobuf::uint32 outer_peer_num() const;
  inline void set_outer_peer_num(::google::protobuf::uint32 value);
  
  // required uint32 alive_time = 5;
  inline bool has_alive_time() const;
  inline void clear_alive_time();
  static const int kAliveTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 alive_time() const;
  inline void set_alive_time(::google::protobuf::uint32 value);
  
  // required uint64 upload_bandwidth = 6;
  inline bool has_upload_bandwidth() const;
  inline void clear_upload_bandwidth();
  static const int kUploadBandwidthFieldNumber = 6;
  inline ::google::protobuf::uint64 upload_bandwidth() const;
  inline void set_upload_bandwidth(::google::protobuf::uint64 value);
  
  // required uint64 download_bandwidth = 7;
  inline bool has_download_bandwidth() const;
  inline void clear_download_bandwidth();
  static const int kDownloadBandwidthFieldNumber = 7;
  inline ::google::protobuf::uint64 download_bandwidth() const;
  inline void set_download_bandwidth(::google::protobuf::uint64 value);
  
  // required uint64 total_upload = 8;
  inline bool has_total_upload() const;
  inline void clear_total_upload();
  static const int kTotalUploadFieldNumber = 8;
  inline ::google::protobuf::uint64 total_upload() const;
  inline void set_total_upload(::google::protobuf::uint64 value);
  
  // required uint64 total_download = 9;
  inline bool has_total_download() const;
  inline void clear_total_download();
  static const int kTotalDownloadFieldNumber = 9;
  inline ::google::protobuf::uint64 total_download() const;
  inline void set_total_download(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:proto_type.Info.TorrentInfo)
 private:
  inline void set_has_info_hash();
  inline void clear_has_info_hash();
  inline void set_has_complete_precent();
  inline void clear_has_complete_precent();
  inline void set_has_inner_peer_num();
  inline void clear_has_inner_peer_num();
  inline void set_has_outer_peer_num();
  inline void clear_has_outer_peer_num();
  inline void set_has_alive_time();
  inline void clear_has_alive_time();
  inline void set_has_upload_bandwidth();
  inline void clear_has_upload_bandwidth();
  inline void set_has_download_bandwidth();
  inline void clear_has_download_bandwidth();
  inline void set_has_total_upload();
  inline void clear_has_total_upload();
  inline void set_has_total_download();
  inline void clear_has_total_download();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* info_hash_;
  ::google::protobuf::uint32 complete_precent_;
  ::google::protobuf::uint32 inner_peer_num_;
  ::google::protobuf::uint32 outer_peer_num_;
  ::google::protobuf::uint32 alive_time_;
  ::google::protobuf::uint64 upload_bandwidth_;
  ::google::protobuf::uint64 download_bandwidth_;
  ::google::protobuf::uint64 total_upload_;
  ::google::protobuf::uint64 total_download_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_proto_2eproto();
  friend void protobuf_AssignDesc_proto_2eproto();
  friend void protobuf_ShutdownFile_proto_2eproto();
  
  void InitAsDefaultInstance();
  static Info_TorrentInfo* default_instance_;
};
// -------------------------------------------------------------------

class Info_PeerInfo : public ::google::protobuf::Message {
 public:
  Info_PeerInfo();
  virtual ~Info_PeerInfo();
  
  Info_PeerInfo(const Info_PeerInfo& from);
  
  inline Info_PeerInfo& operator=(const Info_PeerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Info_PeerInfo& default_instance();
  
  void Swap(Info_PeerInfo* other);
  
  // implements Message ----------------------------------------------
  
  Info_PeerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Info_PeerInfo& from);
  void MergeFrom(const Info_PeerInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 peer_ip = 1;
  inline bool has_peer_ip() const;
  inline void clear_peer_ip();
  static const int kPeerIpFieldNumber = 1;
  inline ::google::protobuf::uint32 peer_ip() const;
  inline void set_peer_ip(::google::protobuf::uint32 value);
  
  // required string peer_type = 2;
  inline bool has_peer_type() const;
  inline void clear_peer_type();
  static const int kPeerTypeFieldNumber = 2;
  inline const ::std::string& peer_type() const;
  inline void set_peer_type(const ::std::string& value);
  inline void set_peer_type(const char* value);
  inline void set_peer_type(const char* value, size_t size);
  inline ::std::string* mutable_peer_type();
  inline ::std::string* release_peer_type();
  
  // required uint32 complete_precent = 3;
  inline bool has_complete_precent() const;
  inline void clear_complete_precent();
  static const int kCompletePrecentFieldNumber = 3;
  inline ::google::protobuf::uint32 complete_precent() const;
  inline void set_complete_precent(::google::protobuf::uint32 value);
  
  // required uint32 alive_time = 4;
  inline bool has_alive_time() const;
  inline void clear_alive_time();
  static const int kAliveTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 alive_time() const;
  inline void set_alive_time(::google::protobuf::uint32 value);
  
  // required uint64 upload_bandwidth = 5;
  inline bool has_upload_bandwidth() const;
  inline void clear_upload_bandwidth();
  static const int kUploadBandwidthFieldNumber = 5;
  inline ::google::protobuf::uint64 upload_bandwidth() const;
  inline void set_upload_bandwidth(::google::protobuf::uint64 value);
  
  // required uint64 download_bandwidth = 6;
  inline bool has_download_bandwidth() const;
  inline void clear_download_bandwidth();
  static const int kDownloadBandwidthFieldNumber = 6;
  inline ::google::protobuf::uint64 download_bandwidth() const;
  inline void set_download_bandwidth(::google::protobuf::uint64 value);
  
  // required uint64 upload = 7;
  inline bool has_upload() const;
  inline void clear_upload();
  static const int kUploadFieldNumber = 7;
  inline ::google::protobuf::uint64 upload() const;
  inline void set_upload(::google::protobuf::uint64 value);
  
  // required uint64 download = 8;
  inline bool has_download() const;
  inline void clear_download();
  static const int kDownloadFieldNumber = 8;
  inline ::google::protobuf::uint64 download() const;
  inline void set_download(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:proto_type.Info.PeerInfo)
 private:
  inline void set_has_peer_ip();
  inline void clear_has_peer_ip();
  inline void set_has_peer_type();
  inline void clear_has_peer_type();
  inline void set_has_complete_precent();
  inline void clear_has_complete_precent();
  inline void set_has_alive_time();
  inline void clear_has_alive_time();
  inline void set_has_upload_bandwidth();
  inline void clear_has_upload_bandwidth();
  inline void set_has_download_bandwidth();
  inline void clear_has_download_bandwidth();
  inline void set_has_upload();
  inline void clear_has_upload();
  inline void set_has_download();
  inline void clear_has_download();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* peer_type_;
  ::google::protobuf::uint32 peer_ip_;
  ::google::protobuf::uint32 complete_precent_;
  ::google::protobuf::uint64 upload_bandwidth_;
  ::google::protobuf::uint64 download_bandwidth_;
  ::google::protobuf::uint64 upload_;
  ::google::protobuf::uint64 download_;
  ::google::protobuf::uint32 alive_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_proto_2eproto();
  friend void protobuf_AssignDesc_proto_2eproto();
  friend void protobuf_ShutdownFile_proto_2eproto();
  
  void InitAsDefaultInstance();
  static Info_PeerInfo* default_instance_;
};
// -------------------------------------------------------------------

class Info_SystemInfo_CpuInfo : public ::google::protobuf::Message {
 public:
  Info_SystemInfo_CpuInfo();
  virtual ~Info_SystemInfo_CpuInfo();
  
  Info_SystemInfo_CpuInfo(const Info_SystemInfo_CpuInfo& from);
  
  inline Info_SystemInfo_CpuInfo& operator=(const Info_SystemInfo_CpuInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Info_SystemInfo_CpuInfo& default_instance();
  
  void Swap(Info_SystemInfo_CpuInfo* other);
  
  // implements Message ----------------------------------------------
  
  Info_SystemInfo_CpuInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Info_SystemInfo_CpuInfo& from);
  void MergeFrom(const Info_SystemInfo_CpuInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string cpu_name = 1;
  inline bool has_cpu_name() const;
  inline void clear_cpu_name();
  static const int kCpuNameFieldNumber = 1;
  inline const ::std::string& cpu_name() const;
  inline void set_cpu_name(const ::std::string& value);
  inline void set_cpu_name(const char* value);
  inline void set_cpu_name(const char* value, size_t size);
  inline ::std::string* mutable_cpu_name();
  inline ::std::string* release_cpu_name();
  
  // required uint32 cpu_usage = 2;
  inline bool has_cpu_usage() const;
  inline void clear_cpu_usage();
  static const int kCpuUsageFieldNumber = 2;
  inline ::google::protobuf::uint32 cpu_usage() const;
  inline void set_cpu_usage(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:proto_type.Info.SystemInfo.CpuInfo)
 private:
  inline void set_has_cpu_name();
  inline void clear_has_cpu_name();
  inline void set_has_cpu_usage();
  inline void clear_has_cpu_usage();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* cpu_name_;
  ::google::protobuf::uint32 cpu_usage_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_proto_2eproto();
  friend void protobuf_AssignDesc_proto_2eproto();
  friend void protobuf_ShutdownFile_proto_2eproto();
  
  void InitAsDefaultInstance();
  static Info_SystemInfo_CpuInfo* default_instance_;
};
// -------------------------------------------------------------------

class Info_SystemInfo_DiskInfo : public ::google::protobuf::Message {
 public:
  Info_SystemInfo_DiskInfo();
  virtual ~Info_SystemInfo_DiskInfo();
  
  Info_SystemInfo_DiskInfo(const Info_SystemInfo_DiskInfo& from);
  
  inline Info_SystemInfo_DiskInfo& operator=(const Info_SystemInfo_DiskInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Info_SystemInfo_DiskInfo& default_instance();
  
  void Swap(Info_SystemInfo_DiskInfo* other);
  
  // implements Message ----------------------------------------------
  
  Info_SystemInfo_DiskInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Info_SystemInfo_DiskInfo& from);
  void MergeFrom(const Info_SystemInfo_DiskInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string disk_name = 1;
  inline bool has_disk_name() const;
  inline void clear_disk_name();
  static const int kDiskNameFieldNumber = 1;
  inline const ::std::string& disk_name() const;
  inline void set_disk_name(const ::std::string& value);
  inline void set_disk_name(const char* value);
  inline void set_disk_name(const char* value, size_t size);
  inline ::std::string* mutable_disk_name();
  inline ::std::string* release_disk_name();
  
  // required uint64 total_size = 2;
  inline bool has_total_size() const;
  inline void clear_total_size();
  static const int kTotalSizeFieldNumber = 2;
  inline ::google::protobuf::uint64 total_size() const;
  inline void set_total_size(::google::protobuf::uint64 value);
  
  // required uint32 usage = 3;
  inline bool has_usage() const;
  inline void clear_usage();
  static const int kUsageFieldNumber = 3;
  inline ::google::protobuf::uint32 usage() const;
  inline void set_usage(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:proto_type.Info.SystemInfo.DiskInfo)
 private:
  inline void set_has_disk_name();
  inline void clear_has_disk_name();
  inline void set_has_total_size();
  inline void clear_has_total_size();
  inline void set_has_usage();
  inline void clear_has_usage();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* disk_name_;
  ::google::protobuf::uint64 total_size_;
  ::google::protobuf::uint32 usage_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_proto_2eproto();
  friend void protobuf_AssignDesc_proto_2eproto();
  friend void protobuf_ShutdownFile_proto_2eproto();
  
  void InitAsDefaultInstance();
  static Info_SystemInfo_DiskInfo* default_instance_;
};
// -------------------------------------------------------------------

class Info_SystemInfo_NetInfo : public ::google::protobuf::Message {
 public:
  Info_SystemInfo_NetInfo();
  virtual ~Info_SystemInfo_NetInfo();
  
  Info_SystemInfo_NetInfo(const Info_SystemInfo_NetInfo& from);
  
  inline Info_SystemInfo_NetInfo& operator=(const Info_SystemInfo_NetInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Info_SystemInfo_NetInfo& default_instance();
  
  void Swap(Info_SystemInfo_NetInfo* other);
  
  // implements Message ----------------------------------------------
  
  Info_SystemInfo_NetInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Info_SystemInfo_NetInfo& from);
  void MergeFrom(const Info_SystemInfo_NetInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string net_name = 1;
  inline bool has_net_name() const;
  inline void clear_net_name();
  static const int kNetNameFieldNumber = 1;
  inline const ::std::string& net_name() const;
  inline void set_net_name(const ::std::string& value);
  inline void set_net_name(const char* value);
  inline void set_net_name(const char* value, size_t size);
  inline ::std::string* mutable_net_name();
  inline ::std::string* release_net_name();
  
  // required uint64 in_size = 2;
  inline bool has_in_size() const;
  inline void clear_in_size();
  static const int kInSizeFieldNumber = 2;
  inline ::google::protobuf::uint64 in_size() const;
  inline void set_in_size(::google::protobuf::uint64 value);
  
  // required uint64 out_size = 3;
  inline bool has_out_size() const;
  inline void clear_out_size();
  static const int kOutSizeFieldNumber = 3;
  inline ::google::protobuf::uint64 out_size() const;
  inline void set_out_size(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:proto_type.Info.SystemInfo.NetInfo)
 private:
  inline void set_has_net_name();
  inline void clear_has_net_name();
  inline void set_has_in_size();
  inline void clear_has_in_size();
  inline void set_has_out_size();
  inline void clear_has_out_size();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* net_name_;
  ::google::protobuf::uint64 in_size_;
  ::google::protobuf::uint64 out_size_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_proto_2eproto();
  friend void protobuf_AssignDesc_proto_2eproto();
  friend void protobuf_ShutdownFile_proto_2eproto();
  
  void InitAsDefaultInstance();
  static Info_SystemInfo_NetInfo* default_instance_;
};
// -------------------------------------------------------------------

class Info_SystemInfo : public ::google::protobuf::Message {
 public:
  Info_SystemInfo();
  virtual ~Info_SystemInfo();
  
  Info_SystemInfo(const Info_SystemInfo& from);
  
  inline Info_SystemInfo& operator=(const Info_SystemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Info_SystemInfo& default_instance();
  
  void Swap(Info_SystemInfo* other);
  
  // implements Message ----------------------------------------------
  
  Info_SystemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Info_SystemInfo& from);
  void MergeFrom(const Info_SystemInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Info_SystemInfo_CpuInfo CpuInfo;
  typedef Info_SystemInfo_DiskInfo DiskInfo;
  typedef Info_SystemInfo_NetInfo NetInfo;
  
  // accessors -------------------------------------------------------
  
  // repeated .proto_type.Info.SystemInfo.CpuInfo cpu_info = 1;
  inline int cpu_info_size() const;
  inline void clear_cpu_info();
  static const int kCpuInfoFieldNumber = 1;
  inline const ::proto_type::Info_SystemInfo_CpuInfo& cpu_info(int index) const;
  inline ::proto_type::Info_SystemInfo_CpuInfo* mutable_cpu_info(int index);
  inline ::proto_type::Info_SystemInfo_CpuInfo* add_cpu_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_type::Info_SystemInfo_CpuInfo >&
      cpu_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_type::Info_SystemInfo_CpuInfo >*
      mutable_cpu_info();
  
  // required uint64 mem_total_size = 2;
  inline bool has_mem_total_size() const;
  inline void clear_mem_total_size();
  static const int kMemTotalSizeFieldNumber = 2;
  inline ::google::protobuf::uint64 mem_total_size() const;
  inline void set_mem_total_size(::google::protobuf::uint64 value);
  
  // required uint32 mem_usage = 3;
  inline bool has_mem_usage() const;
  inline void clear_mem_usage();
  static const int kMemUsageFieldNumber = 3;
  inline ::google::protobuf::uint32 mem_usage() const;
  inline void set_mem_usage(::google::protobuf::uint32 value);
  
  // repeated .proto_type.Info.SystemInfo.DiskInfo disk_info = 4;
  inline int disk_info_size() const;
  inline void clear_disk_info();
  static const int kDiskInfoFieldNumber = 4;
  inline const ::proto_type::Info_SystemInfo_DiskInfo& disk_info(int index) const;
  inline ::proto_type::Info_SystemInfo_DiskInfo* mutable_disk_info(int index);
  inline ::proto_type::Info_SystemInfo_DiskInfo* add_disk_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_type::Info_SystemInfo_DiskInfo >&
      disk_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_type::Info_SystemInfo_DiskInfo >*
      mutable_disk_info();
  
  // repeated .proto_type.Info.SystemInfo.NetInfo net_info = 5;
  inline int net_info_size() const;
  inline void clear_net_info();
  static const int kNetInfoFieldNumber = 5;
  inline const ::proto_type::Info_SystemInfo_NetInfo& net_info(int index) const;
  inline ::proto_type::Info_SystemInfo_NetInfo* mutable_net_info(int index);
  inline ::proto_type::Info_SystemInfo_NetInfo* add_net_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_type::Info_SystemInfo_NetInfo >&
      net_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_type::Info_SystemInfo_NetInfo >*
      mutable_net_info();
  
  // @@protoc_insertion_point(class_scope:proto_type.Info.SystemInfo)
 private:
  inline void set_has_mem_total_size();
  inline void clear_has_mem_total_size();
  inline void set_has_mem_usage();
  inline void clear_has_mem_usage();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::proto_type::Info_SystemInfo_CpuInfo > cpu_info_;
  ::google::protobuf::uint64 mem_total_size_;
  ::google::protobuf::RepeatedPtrField< ::proto_type::Info_SystemInfo_DiskInfo > disk_info_;
  ::google::protobuf::RepeatedPtrField< ::proto_type::Info_SystemInfo_NetInfo > net_info_;
  ::google::protobuf::uint32 mem_usage_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_proto_2eproto();
  friend void protobuf_AssignDesc_proto_2eproto();
  friend void protobuf_ShutdownFile_proto_2eproto();
  
  void InitAsDefaultInstance();
  static Info_SystemInfo* default_instance_;
};
// -------------------------------------------------------------------

class Info_CacheStatusInfo : public ::google::protobuf::Message {
 public:
  Info_CacheStatusInfo();
  virtual ~Info_CacheStatusInfo();
  
  Info_CacheStatusInfo(const Info_CacheStatusInfo& from);
  
  inline Info_CacheStatusInfo& operator=(const Info_CacheStatusInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Info_CacheStatusInfo& default_instance();
  
  void Swap(Info_CacheStatusInfo* other);
  
  // implements Message ----------------------------------------------
  
  Info_CacheStatusInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Info_CacheStatusInfo& from);
  void MergeFrom(const Info_CacheStatusInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 reads = 1;
  inline bool has_reads() const;
  inline void clear_reads();
  static const int kReadsFieldNumber = 1;
  inline ::google::protobuf::uint64 reads() const;
  inline void set_reads(::google::protobuf::uint64 value);
  
  // required uint64 writes = 2;
  inline bool has_writes() const;
  inline void clear_writes();
  static const int kWritesFieldNumber = 2;
  inline ::google::protobuf::uint64 writes() const;
  inline void set_writes(::google::protobuf::uint64 value);
  
  // required uint64 blocks_read = 3;
  inline bool has_blocks_read() const;
  inline void clear_blocks_read();
  static const int kBlocksReadFieldNumber = 3;
  inline ::google::protobuf::uint64 blocks_read() const;
  inline void set_blocks_read(::google::protobuf::uint64 value);
  
  // required uint64 blocks_write = 4;
  inline bool has_blocks_write() const;
  inline void clear_blocks_write();
  static const int kBlocksWriteFieldNumber = 4;
  inline ::google::protobuf::uint64 blocks_write() const;
  inline void set_blocks_write(::google::protobuf::uint64 value);
  
  // required uint64 blocks_read_hit = 5;
  inline bool has_blocks_read_hit() const;
  inline void clear_blocks_read_hit();
  static const int kBlocksReadHitFieldNumber = 5;
  inline ::google::protobuf::uint64 blocks_read_hit() const;
  inline void set_blocks_read_hit(::google::protobuf::uint64 value);
  
  // required uint64 write_to_disk_directly = 6;
  inline bool has_write_to_disk_directly() const;
  inline void clear_write_to_disk_directly();
  static const int kWriteToDiskDirectlyFieldNumber = 6;
  inline ::google::protobuf::uint64 write_to_disk_directly() const;
  inline void set_write_to_disk_directly(::google::protobuf::uint64 value);
  
  // required uint64 read_cache_size = 7;
  inline bool has_read_cache_size() const;
  inline void clear_read_cache_size();
  static const int kReadCacheSizeFieldNumber = 7;
  inline ::google::protobuf::uint64 read_cache_size() const;
  inline void set_read_cache_size(::google::protobuf::uint64 value);
  
  // required uint64 finished_write_cache_size = 8;
  inline bool has_finished_write_cache_size() const;
  inline void clear_finished_write_cache_size();
  static const int kFinishedWriteCacheSizeFieldNumber = 8;
  inline ::google::protobuf::uint64 finished_write_cache_size() const;
  inline void set_finished_write_cache_size(::google::protobuf::uint64 value);
  
  // required uint64 unfinished_write_cache_size = 9;
  inline bool has_unfinished_write_cache_size() const;
  inline void clear_unfinished_write_cache_size();
  static const int kUnfinishedWriteCacheSizeFieldNumber = 9;
  inline ::google::protobuf::uint64 unfinished_write_cache_size() const;
  inline void set_unfinished_write_cache_size(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:proto_type.Info.CacheStatusInfo)
 private:
  inline void set_has_reads();
  inline void clear_has_reads();
  inline void set_has_writes();
  inline void clear_has_writes();
  inline void set_has_blocks_read();
  inline void clear_has_blocks_read();
  inline void set_has_blocks_write();
  inline void clear_has_blocks_write();
  inline void set_has_blocks_read_hit();
  inline void clear_has_blocks_read_hit();
  inline void set_has_write_to_disk_directly();
  inline void clear_has_write_to_disk_directly();
  inline void set_has_read_cache_size();
  inline void clear_has_read_cache_size();
  inline void set_has_finished_write_cache_size();
  inline void clear_has_finished_write_cache_size();
  inline void set_has_unfinished_write_cache_size();
  inline void clear_has_unfinished_write_cache_size();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 reads_;
  ::google::protobuf::uint64 writes_;
  ::google::protobuf::uint64 blocks_read_;
  ::google::protobuf::uint64 blocks_write_;
  ::google::protobuf::uint64 blocks_read_hit_;
  ::google::protobuf::uint64 write_to_disk_directly_;
  ::google::protobuf::uint64 read_cache_size_;
  ::google::protobuf::uint64 finished_write_cache_size_;
  ::google::protobuf::uint64 unfinished_write_cache_size_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_proto_2eproto();
  friend void protobuf_AssignDesc_proto_2eproto();
  friend void protobuf_ShutdownFile_proto_2eproto();
  
  void InitAsDefaultInstance();
  static Info_CacheStatusInfo* default_instance_;
};
// -------------------------------------------------------------------

class Info : public ::google::protobuf::Message {
 public:
  Info();
  virtual ~Info();
  
  Info(const Info& from);
  
  inline Info& operator=(const Info& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Info& default_instance();
  
  void Swap(Info* other);
  
  // implements Message ----------------------------------------------
  
  Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Info& from);
  void MergeFrom(const Info& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Info_SessionInfo SessionInfo;
  typedef Info_TorrentInfo TorrentInfo;
  typedef Info_PeerInfo PeerInfo;
  typedef Info_SystemInfo SystemInfo;
  typedef Info_CacheStatusInfo CacheStatusInfo;
  
  // accessors -------------------------------------------------------
  
  // repeated .proto_type.Info.SessionInfo session_info = 1;
  inline int session_info_size() const;
  inline void clear_session_info();
  static const int kSessionInfoFieldNumber = 1;
  inline const ::proto_type::Info_SessionInfo& session_info(int index) const;
  inline ::proto_type::Info_SessionInfo* mutable_session_info(int index);
  inline ::proto_type::Info_SessionInfo* add_session_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_type::Info_SessionInfo >&
      session_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_type::Info_SessionInfo >*
      mutable_session_info();
  
  // repeated .proto_type.Info.TorrentInfo torrent_info = 2;
  inline int torrent_info_size() const;
  inline void clear_torrent_info();
  static const int kTorrentInfoFieldNumber = 2;
  inline const ::proto_type::Info_TorrentInfo& torrent_info(int index) const;
  inline ::proto_type::Info_TorrentInfo* mutable_torrent_info(int index);
  inline ::proto_type::Info_TorrentInfo* add_torrent_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_type::Info_TorrentInfo >&
      torrent_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_type::Info_TorrentInfo >*
      mutable_torrent_info();
  
  // repeated .proto_type.Info.PeerInfo peer_info = 3;
  inline int peer_info_size() const;
  inline void clear_peer_info();
  static const int kPeerInfoFieldNumber = 3;
  inline const ::proto_type::Info_PeerInfo& peer_info(int index) const;
  inline ::proto_type::Info_PeerInfo* mutable_peer_info(int index);
  inline ::proto_type::Info_PeerInfo* add_peer_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_type::Info_PeerInfo >&
      peer_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_type::Info_PeerInfo >*
      mutable_peer_info();
  
  // optional .proto_type.Info.SystemInfo system_info = 4;
  inline bool has_system_info() const;
  inline void clear_system_info();
  static const int kSystemInfoFieldNumber = 4;
  inline const ::proto_type::Info_SystemInfo& system_info() const;
  inline ::proto_type::Info_SystemInfo* mutable_system_info();
  inline ::proto_type::Info_SystemInfo* release_system_info();
  
  // optional .proto_type.Info.CacheStatusInfo cache_status_info = 5;
  inline bool has_cache_status_info() const;
  inline void clear_cache_status_info();
  static const int kCacheStatusInfoFieldNumber = 5;
  inline const ::proto_type::Info_CacheStatusInfo& cache_status_info() const;
  inline ::proto_type::Info_CacheStatusInfo* mutable_cache_status_info();
  inline ::proto_type::Info_CacheStatusInfo* release_cache_status_info();
  
  // @@protoc_insertion_point(class_scope:proto_type.Info)
 private:
  inline void set_has_system_info();
  inline void clear_has_system_info();
  inline void set_has_cache_status_info();
  inline void clear_has_cache_status_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::proto_type::Info_SessionInfo > session_info_;
  ::google::protobuf::RepeatedPtrField< ::proto_type::Info_TorrentInfo > torrent_info_;
  ::google::protobuf::RepeatedPtrField< ::proto_type::Info_PeerInfo > peer_info_;
  ::proto_type::Info_SystemInfo* system_info_;
  ::proto_type::Info_CacheStatusInfo* cache_status_info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_proto_2eproto();
  friend void protobuf_AssignDesc_proto_2eproto();
  friend void protobuf_ShutdownFile_proto_2eproto();
  
  void InitAsDefaultInstance();
  static Info* default_instance_;
};
// -------------------------------------------------------------------

class Command : public ::google::protobuf::Message {
 public:
  Command();
  virtual ~Command();
  
  Command(const Command& from);
  
  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();
  
  void Swap(Command* other);
  
  // implements Message ----------------------------------------------
  
  Command* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string command = 1;
  inline int command_size() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 1;
  inline const ::std::string& command(int index) const;
  inline ::std::string* mutable_command(int index);
  inline void set_command(int index, const ::std::string& value);
  inline void set_command(int index, const char* value);
  inline void set_command(int index, const char* value, size_t size);
  inline ::std::string* add_command();
  inline void add_command(const ::std::string& value);
  inline void add_command(const char* value);
  inline void add_command(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& command() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_command();
  
  // @@protoc_insertion_point(class_scope:proto_type.Command)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> command_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_proto_2eproto();
  friend void protobuf_AssignDesc_proto_2eproto();
  friend void protobuf_ShutdownFile_proto_2eproto();
  
  void InitAsDefaultInstance();
  static Command* default_instance_;
};
// ===================================================================


// ===================================================================

// Info_SessionInfo

// required string session_type = 1;
inline bool Info_SessionInfo::has_session_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Info_SessionInfo::set_has_session_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Info_SessionInfo::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Info_SessionInfo::clear_session_type() {
  if (session_type_ != &::google::protobuf::internal::kEmptyString) {
    session_type_->clear();
  }
  clear_has_session_type();
}
inline const ::std::string& Info_SessionInfo::session_type() const {
  return *session_type_;
}
inline void Info_SessionInfo::set_session_type(const ::std::string& value) {
  set_has_session_type();
  if (session_type_ == &::google::protobuf::internal::kEmptyString) {
    session_type_ = new ::std::string;
  }
  session_type_->assign(value);
}
inline void Info_SessionInfo::set_session_type(const char* value) {
  set_has_session_type();
  if (session_type_ == &::google::protobuf::internal::kEmptyString) {
    session_type_ = new ::std::string;
  }
  session_type_->assign(value);
}
inline void Info_SessionInfo::set_session_type(const char* value, size_t size) {
  set_has_session_type();
  if (session_type_ == &::google::protobuf::internal::kEmptyString) {
    session_type_ = new ::std::string;
  }
  session_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Info_SessionInfo::mutable_session_type() {
  set_has_session_type();
  if (session_type_ == &::google::protobuf::internal::kEmptyString) {
    session_type_ = new ::std::string;
  }
  return session_type_;
}
inline ::std::string* Info_SessionInfo::release_session_type() {
  clear_has_session_type();
  if (session_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = session_type_;
    session_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 torrent_num = 2;
inline bool Info_SessionInfo::has_torrent_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Info_SessionInfo::set_has_torrent_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Info_SessionInfo::clear_has_torrent_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Info_SessionInfo::clear_torrent_num() {
  torrent_num_ = 0u;
  clear_has_torrent_num();
}
inline ::google::protobuf::uint32 Info_SessionInfo::torrent_num() const {
  return torrent_num_;
}
inline void Info_SessionInfo::set_torrent_num(::google::protobuf::uint32 value) {
  set_has_torrent_num();
  torrent_num_ = value;
}

// required uint32 peer_num = 3;
inline bool Info_SessionInfo::has_peer_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Info_SessionInfo::set_has_peer_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Info_SessionInfo::clear_has_peer_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Info_SessionInfo::clear_peer_num() {
  peer_num_ = 0u;
  clear_has_peer_num();
}
inline ::google::protobuf::uint32 Info_SessionInfo::peer_num() const {
  return peer_num_;
}
inline void Info_SessionInfo::set_peer_num(::google::protobuf::uint32 value) {
  set_has_peer_num();
  peer_num_ = value;
}

// required uint64 upload_bandwidth = 4;
inline bool Info_SessionInfo::has_upload_bandwidth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Info_SessionInfo::set_has_upload_bandwidth() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Info_SessionInfo::clear_has_upload_bandwidth() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Info_SessionInfo::clear_upload_bandwidth() {
  upload_bandwidth_ = GOOGLE_ULONGLONG(0);
  clear_has_upload_bandwidth();
}
inline ::google::protobuf::uint64 Info_SessionInfo::upload_bandwidth() const {
  return upload_bandwidth_;
}
inline void Info_SessionInfo::set_upload_bandwidth(::google::protobuf::uint64 value) {
  set_has_upload_bandwidth();
  upload_bandwidth_ = value;
}

// required uint64 download_bandwidth = 5;
inline bool Info_SessionInfo::has_download_bandwidth() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Info_SessionInfo::set_has_download_bandwidth() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Info_SessionInfo::clear_has_download_bandwidth() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Info_SessionInfo::clear_download_bandwidth() {
  download_bandwidth_ = GOOGLE_ULONGLONG(0);
  clear_has_download_bandwidth();
}
inline ::google::protobuf::uint64 Info_SessionInfo::download_bandwidth() const {
  return download_bandwidth_;
}
inline void Info_SessionInfo::set_download_bandwidth(::google::protobuf::uint64 value) {
  set_has_download_bandwidth();
  download_bandwidth_ = value;
}

// -------------------------------------------------------------------

// Info_TorrentInfo

// required string info_hash = 1;
inline bool Info_TorrentInfo::has_info_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Info_TorrentInfo::set_has_info_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Info_TorrentInfo::clear_has_info_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Info_TorrentInfo::clear_info_hash() {
  if (info_hash_ != &::google::protobuf::internal::kEmptyString) {
    info_hash_->clear();
  }
  clear_has_info_hash();
}
inline const ::std::string& Info_TorrentInfo::info_hash() const {
  return *info_hash_;
}
inline void Info_TorrentInfo::set_info_hash(const ::std::string& value) {
  set_has_info_hash();
  if (info_hash_ == &::google::protobuf::internal::kEmptyString) {
    info_hash_ = new ::std::string;
  }
  info_hash_->assign(value);
}
inline void Info_TorrentInfo::set_info_hash(const char* value) {
  set_has_info_hash();
  if (info_hash_ == &::google::protobuf::internal::kEmptyString) {
    info_hash_ = new ::std::string;
  }
  info_hash_->assign(value);
}
inline void Info_TorrentInfo::set_info_hash(const char* value, size_t size) {
  set_has_info_hash();
  if (info_hash_ == &::google::protobuf::internal::kEmptyString) {
    info_hash_ = new ::std::string;
  }
  info_hash_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Info_TorrentInfo::mutable_info_hash() {
  set_has_info_hash();
  if (info_hash_ == &::google::protobuf::internal::kEmptyString) {
    info_hash_ = new ::std::string;
  }
  return info_hash_;
}
inline ::std::string* Info_TorrentInfo::release_info_hash() {
  clear_has_info_hash();
  if (info_hash_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = info_hash_;
    info_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 complete_precent = 2;
inline bool Info_TorrentInfo::has_complete_precent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Info_TorrentInfo::set_has_complete_precent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Info_TorrentInfo::clear_has_complete_precent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Info_TorrentInfo::clear_complete_precent() {
  complete_precent_ = 0u;
  clear_has_complete_precent();
}
inline ::google::protobuf::uint32 Info_TorrentInfo::complete_precent() const {
  return complete_precent_;
}
inline void Info_TorrentInfo::set_complete_precent(::google::protobuf::uint32 value) {
  set_has_complete_precent();
  complete_precent_ = value;
}

// required uint32 inner_peer_num = 3;
inline bool Info_TorrentInfo::has_inner_peer_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Info_TorrentInfo::set_has_inner_peer_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Info_TorrentInfo::clear_has_inner_peer_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Info_TorrentInfo::clear_inner_peer_num() {
  inner_peer_num_ = 0u;
  clear_has_inner_peer_num();
}
inline ::google::protobuf::uint32 Info_TorrentInfo::inner_peer_num() const {
  return inner_peer_num_;
}
inline void Info_TorrentInfo::set_inner_peer_num(::google::protobuf::uint32 value) {
  set_has_inner_peer_num();
  inner_peer_num_ = value;
}

// required uint32 outer_peer_num = 4;
inline bool Info_TorrentInfo::has_outer_peer_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Info_TorrentInfo::set_has_outer_peer_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Info_TorrentInfo::clear_has_outer_peer_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Info_TorrentInfo::clear_outer_peer_num() {
  outer_peer_num_ = 0u;
  clear_has_outer_peer_num();
}
inline ::google::protobuf::uint32 Info_TorrentInfo::outer_peer_num() const {
  return outer_peer_num_;
}
inline void Info_TorrentInfo::set_outer_peer_num(::google::protobuf::uint32 value) {
  set_has_outer_peer_num();
  outer_peer_num_ = value;
}

// required uint32 alive_time = 5;
inline bool Info_TorrentInfo::has_alive_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Info_TorrentInfo::set_has_alive_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Info_TorrentInfo::clear_has_alive_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Info_TorrentInfo::clear_alive_time() {
  alive_time_ = 0u;
  clear_has_alive_time();
}
inline ::google::protobuf::uint32 Info_TorrentInfo::alive_time() const {
  return alive_time_;
}
inline void Info_TorrentInfo::set_alive_time(::google::protobuf::uint32 value) {
  set_has_alive_time();
  alive_time_ = value;
}

// required uint64 upload_bandwidth = 6;
inline bool Info_TorrentInfo::has_upload_bandwidth() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Info_TorrentInfo::set_has_upload_bandwidth() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Info_TorrentInfo::clear_has_upload_bandwidth() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Info_TorrentInfo::clear_upload_bandwidth() {
  upload_bandwidth_ = GOOGLE_ULONGLONG(0);
  clear_has_upload_bandwidth();
}
inline ::google::protobuf::uint64 Info_TorrentInfo::upload_bandwidth() const {
  return upload_bandwidth_;
}
inline void Info_TorrentInfo::set_upload_bandwidth(::google::protobuf::uint64 value) {
  set_has_upload_bandwidth();
  upload_bandwidth_ = value;
}

// required uint64 download_bandwidth = 7;
inline bool Info_TorrentInfo::has_download_bandwidth() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Info_TorrentInfo::set_has_download_bandwidth() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Info_TorrentInfo::clear_has_download_bandwidth() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Info_TorrentInfo::clear_download_bandwidth() {
  download_bandwidth_ = GOOGLE_ULONGLONG(0);
  clear_has_download_bandwidth();
}
inline ::google::protobuf::uint64 Info_TorrentInfo::download_bandwidth() const {
  return download_bandwidth_;
}
inline void Info_TorrentInfo::set_download_bandwidth(::google::protobuf::uint64 value) {
  set_has_download_bandwidth();
  download_bandwidth_ = value;
}

// required uint64 total_upload = 8;
inline bool Info_TorrentInfo::has_total_upload() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Info_TorrentInfo::set_has_total_upload() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Info_TorrentInfo::clear_has_total_upload() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Info_TorrentInfo::clear_total_upload() {
  total_upload_ = GOOGLE_ULONGLONG(0);
  clear_has_total_upload();
}
inline ::google::protobuf::uint64 Info_TorrentInfo::total_upload() const {
  return total_upload_;
}
inline void Info_TorrentInfo::set_total_upload(::google::protobuf::uint64 value) {
  set_has_total_upload();
  total_upload_ = value;
}

// required uint64 total_download = 9;
inline bool Info_TorrentInfo::has_total_download() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Info_TorrentInfo::set_has_total_download() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Info_TorrentInfo::clear_has_total_download() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Info_TorrentInfo::clear_total_download() {
  total_download_ = GOOGLE_ULONGLONG(0);
  clear_has_total_download();
}
inline ::google::protobuf::uint64 Info_TorrentInfo::total_download() const {
  return total_download_;
}
inline void Info_TorrentInfo::set_total_download(::google::protobuf::uint64 value) {
  set_has_total_download();
  total_download_ = value;
}

// -------------------------------------------------------------------

// Info_PeerInfo

// required uint32 peer_ip = 1;
inline bool Info_PeerInfo::has_peer_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Info_PeerInfo::set_has_peer_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Info_PeerInfo::clear_has_peer_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Info_PeerInfo::clear_peer_ip() {
  peer_ip_ = 0u;
  clear_has_peer_ip();
}
inline ::google::protobuf::uint32 Info_PeerInfo::peer_ip() const {
  return peer_ip_;
}
inline void Info_PeerInfo::set_peer_ip(::google::protobuf::uint32 value) {
  set_has_peer_ip();
  peer_ip_ = value;
}

// required string peer_type = 2;
inline bool Info_PeerInfo::has_peer_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Info_PeerInfo::set_has_peer_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Info_PeerInfo::clear_has_peer_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Info_PeerInfo::clear_peer_type() {
  if (peer_type_ != &::google::protobuf::internal::kEmptyString) {
    peer_type_->clear();
  }
  clear_has_peer_type();
}
inline const ::std::string& Info_PeerInfo::peer_type() const {
  return *peer_type_;
}
inline void Info_PeerInfo::set_peer_type(const ::std::string& value) {
  set_has_peer_type();
  if (peer_type_ == &::google::protobuf::internal::kEmptyString) {
    peer_type_ = new ::std::string;
  }
  peer_type_->assign(value);
}
inline void Info_PeerInfo::set_peer_type(const char* value) {
  set_has_peer_type();
  if (peer_type_ == &::google::protobuf::internal::kEmptyString) {
    peer_type_ = new ::std::string;
  }
  peer_type_->assign(value);
}
inline void Info_PeerInfo::set_peer_type(const char* value, size_t size) {
  set_has_peer_type();
  if (peer_type_ == &::google::protobuf::internal::kEmptyString) {
    peer_type_ = new ::std::string;
  }
  peer_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Info_PeerInfo::mutable_peer_type() {
  set_has_peer_type();
  if (peer_type_ == &::google::protobuf::internal::kEmptyString) {
    peer_type_ = new ::std::string;
  }
  return peer_type_;
}
inline ::std::string* Info_PeerInfo::release_peer_type() {
  clear_has_peer_type();
  if (peer_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = peer_type_;
    peer_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 complete_precent = 3;
inline bool Info_PeerInfo::has_complete_precent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Info_PeerInfo::set_has_complete_precent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Info_PeerInfo::clear_has_complete_precent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Info_PeerInfo::clear_complete_precent() {
  complete_precent_ = 0u;
  clear_has_complete_precent();
}
inline ::google::protobuf::uint32 Info_PeerInfo::complete_precent() const {
  return complete_precent_;
}
inline void Info_PeerInfo::set_complete_precent(::google::protobuf::uint32 value) {
  set_has_complete_precent();
  complete_precent_ = value;
}

// required uint32 alive_time = 4;
inline bool Info_PeerInfo::has_alive_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Info_PeerInfo::set_has_alive_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Info_PeerInfo::clear_has_alive_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Info_PeerInfo::clear_alive_time() {
  alive_time_ = 0u;
  clear_has_alive_time();
}
inline ::google::protobuf::uint32 Info_PeerInfo::alive_time() const {
  return alive_time_;
}
inline void Info_PeerInfo::set_alive_time(::google::protobuf::uint32 value) {
  set_has_alive_time();
  alive_time_ = value;
}

// required uint64 upload_bandwidth = 5;
inline bool Info_PeerInfo::has_upload_bandwidth() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Info_PeerInfo::set_has_upload_bandwidth() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Info_PeerInfo::clear_has_upload_bandwidth() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Info_PeerInfo::clear_upload_bandwidth() {
  upload_bandwidth_ = GOOGLE_ULONGLONG(0);
  clear_has_upload_bandwidth();
}
inline ::google::protobuf::uint64 Info_PeerInfo::upload_bandwidth() const {
  return upload_bandwidth_;
}
inline void Info_PeerInfo::set_upload_bandwidth(::google::protobuf::uint64 value) {
  set_has_upload_bandwidth();
  upload_bandwidth_ = value;
}

// required uint64 download_bandwidth = 6;
inline bool Info_PeerInfo::has_download_bandwidth() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Info_PeerInfo::set_has_download_bandwidth() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Info_PeerInfo::clear_has_download_bandwidth() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Info_PeerInfo::clear_download_bandwidth() {
  download_bandwidth_ = GOOGLE_ULONGLONG(0);
  clear_has_download_bandwidth();
}
inline ::google::protobuf::uint64 Info_PeerInfo::download_bandwidth() const {
  return download_bandwidth_;
}
inline void Info_PeerInfo::set_download_bandwidth(::google::protobuf::uint64 value) {
  set_has_download_bandwidth();
  download_bandwidth_ = value;
}

// required uint64 upload = 7;
inline bool Info_PeerInfo::has_upload() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Info_PeerInfo::set_has_upload() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Info_PeerInfo::clear_has_upload() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Info_PeerInfo::clear_upload() {
  upload_ = GOOGLE_ULONGLONG(0);
  clear_has_upload();
}
inline ::google::protobuf::uint64 Info_PeerInfo::upload() const {
  return upload_;
}
inline void Info_PeerInfo::set_upload(::google::protobuf::uint64 value) {
  set_has_upload();
  upload_ = value;
}

// required uint64 download = 8;
inline bool Info_PeerInfo::has_download() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Info_PeerInfo::set_has_download() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Info_PeerInfo::clear_has_download() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Info_PeerInfo::clear_download() {
  download_ = GOOGLE_ULONGLONG(0);
  clear_has_download();
}
inline ::google::protobuf::uint64 Info_PeerInfo::download() const {
  return download_;
}
inline void Info_PeerInfo::set_download(::google::protobuf::uint64 value) {
  set_has_download();
  download_ = value;
}

// -------------------------------------------------------------------

// Info_SystemInfo_CpuInfo

// required string cpu_name = 1;
inline bool Info_SystemInfo_CpuInfo::has_cpu_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Info_SystemInfo_CpuInfo::set_has_cpu_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Info_SystemInfo_CpuInfo::clear_has_cpu_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Info_SystemInfo_CpuInfo::clear_cpu_name() {
  if (cpu_name_ != &::google::protobuf::internal::kEmptyString) {
    cpu_name_->clear();
  }
  clear_has_cpu_name();
}
inline const ::std::string& Info_SystemInfo_CpuInfo::cpu_name() const {
  return *cpu_name_;
}
inline void Info_SystemInfo_CpuInfo::set_cpu_name(const ::std::string& value) {
  set_has_cpu_name();
  if (cpu_name_ == &::google::protobuf::internal::kEmptyString) {
    cpu_name_ = new ::std::string;
  }
  cpu_name_->assign(value);
}
inline void Info_SystemInfo_CpuInfo::set_cpu_name(const char* value) {
  set_has_cpu_name();
  if (cpu_name_ == &::google::protobuf::internal::kEmptyString) {
    cpu_name_ = new ::std::string;
  }
  cpu_name_->assign(value);
}
inline void Info_SystemInfo_CpuInfo::set_cpu_name(const char* value, size_t size) {
  set_has_cpu_name();
  if (cpu_name_ == &::google::protobuf::internal::kEmptyString) {
    cpu_name_ = new ::std::string;
  }
  cpu_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Info_SystemInfo_CpuInfo::mutable_cpu_name() {
  set_has_cpu_name();
  if (cpu_name_ == &::google::protobuf::internal::kEmptyString) {
    cpu_name_ = new ::std::string;
  }
  return cpu_name_;
}
inline ::std::string* Info_SystemInfo_CpuInfo::release_cpu_name() {
  clear_has_cpu_name();
  if (cpu_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cpu_name_;
    cpu_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 cpu_usage = 2;
inline bool Info_SystemInfo_CpuInfo::has_cpu_usage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Info_SystemInfo_CpuInfo::set_has_cpu_usage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Info_SystemInfo_CpuInfo::clear_has_cpu_usage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Info_SystemInfo_CpuInfo::clear_cpu_usage() {
  cpu_usage_ = 0u;
  clear_has_cpu_usage();
}
inline ::google::protobuf::uint32 Info_SystemInfo_CpuInfo::cpu_usage() const {
  return cpu_usage_;
}
inline void Info_SystemInfo_CpuInfo::set_cpu_usage(::google::protobuf::uint32 value) {
  set_has_cpu_usage();
  cpu_usage_ = value;
}

// -------------------------------------------------------------------

// Info_SystemInfo_DiskInfo

// required string disk_name = 1;
inline bool Info_SystemInfo_DiskInfo::has_disk_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Info_SystemInfo_DiskInfo::set_has_disk_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Info_SystemInfo_DiskInfo::clear_has_disk_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Info_SystemInfo_DiskInfo::clear_disk_name() {
  if (disk_name_ != &::google::protobuf::internal::kEmptyString) {
    disk_name_->clear();
  }
  clear_has_disk_name();
}
inline const ::std::string& Info_SystemInfo_DiskInfo::disk_name() const {
  return *disk_name_;
}
inline void Info_SystemInfo_DiskInfo::set_disk_name(const ::std::string& value) {
  set_has_disk_name();
  if (disk_name_ == &::google::protobuf::internal::kEmptyString) {
    disk_name_ = new ::std::string;
  }
  disk_name_->assign(value);
}
inline void Info_SystemInfo_DiskInfo::set_disk_name(const char* value) {
  set_has_disk_name();
  if (disk_name_ == &::google::protobuf::internal::kEmptyString) {
    disk_name_ = new ::std::string;
  }
  disk_name_->assign(value);
}
inline void Info_SystemInfo_DiskInfo::set_disk_name(const char* value, size_t size) {
  set_has_disk_name();
  if (disk_name_ == &::google::protobuf::internal::kEmptyString) {
    disk_name_ = new ::std::string;
  }
  disk_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Info_SystemInfo_DiskInfo::mutable_disk_name() {
  set_has_disk_name();
  if (disk_name_ == &::google::protobuf::internal::kEmptyString) {
    disk_name_ = new ::std::string;
  }
  return disk_name_;
}
inline ::std::string* Info_SystemInfo_DiskInfo::release_disk_name() {
  clear_has_disk_name();
  if (disk_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = disk_name_;
    disk_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint64 total_size = 2;
inline bool Info_SystemInfo_DiskInfo::has_total_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Info_SystemInfo_DiskInfo::set_has_total_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Info_SystemInfo_DiskInfo::clear_has_total_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Info_SystemInfo_DiskInfo::clear_total_size() {
  total_size_ = GOOGLE_ULONGLONG(0);
  clear_has_total_size();
}
inline ::google::protobuf::uint64 Info_SystemInfo_DiskInfo::total_size() const {
  return total_size_;
}
inline void Info_SystemInfo_DiskInfo::set_total_size(::google::protobuf::uint64 value) {
  set_has_total_size();
  total_size_ = value;
}

// required uint32 usage = 3;
inline bool Info_SystemInfo_DiskInfo::has_usage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Info_SystemInfo_DiskInfo::set_has_usage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Info_SystemInfo_DiskInfo::clear_has_usage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Info_SystemInfo_DiskInfo::clear_usage() {
  usage_ = 0u;
  clear_has_usage();
}
inline ::google::protobuf::uint32 Info_SystemInfo_DiskInfo::usage() const {
  return usage_;
}
inline void Info_SystemInfo_DiskInfo::set_usage(::google::protobuf::uint32 value) {
  set_has_usage();
  usage_ = value;
}

// -------------------------------------------------------------------

// Info_SystemInfo_NetInfo

// required string net_name = 1;
inline bool Info_SystemInfo_NetInfo::has_net_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Info_SystemInfo_NetInfo::set_has_net_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Info_SystemInfo_NetInfo::clear_has_net_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Info_SystemInfo_NetInfo::clear_net_name() {
  if (net_name_ != &::google::protobuf::internal::kEmptyString) {
    net_name_->clear();
  }
  clear_has_net_name();
}
inline const ::std::string& Info_SystemInfo_NetInfo::net_name() const {
  return *net_name_;
}
inline void Info_SystemInfo_NetInfo::set_net_name(const ::std::string& value) {
  set_has_net_name();
  if (net_name_ == &::google::protobuf::internal::kEmptyString) {
    net_name_ = new ::std::string;
  }
  net_name_->assign(value);
}
inline void Info_SystemInfo_NetInfo::set_net_name(const char* value) {
  set_has_net_name();
  if (net_name_ == &::google::protobuf::internal::kEmptyString) {
    net_name_ = new ::std::string;
  }
  net_name_->assign(value);
}
inline void Info_SystemInfo_NetInfo::set_net_name(const char* value, size_t size) {
  set_has_net_name();
  if (net_name_ == &::google::protobuf::internal::kEmptyString) {
    net_name_ = new ::std::string;
  }
  net_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Info_SystemInfo_NetInfo::mutable_net_name() {
  set_has_net_name();
  if (net_name_ == &::google::protobuf::internal::kEmptyString) {
    net_name_ = new ::std::string;
  }
  return net_name_;
}
inline ::std::string* Info_SystemInfo_NetInfo::release_net_name() {
  clear_has_net_name();
  if (net_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = net_name_;
    net_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint64 in_size = 2;
inline bool Info_SystemInfo_NetInfo::has_in_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Info_SystemInfo_NetInfo::set_has_in_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Info_SystemInfo_NetInfo::clear_has_in_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Info_SystemInfo_NetInfo::clear_in_size() {
  in_size_ = GOOGLE_ULONGLONG(0);
  clear_has_in_size();
}
inline ::google::protobuf::uint64 Info_SystemInfo_NetInfo::in_size() const {
  return in_size_;
}
inline void Info_SystemInfo_NetInfo::set_in_size(::google::protobuf::uint64 value) {
  set_has_in_size();
  in_size_ = value;
}

// required uint64 out_size = 3;
inline bool Info_SystemInfo_NetInfo::has_out_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Info_SystemInfo_NetInfo::set_has_out_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Info_SystemInfo_NetInfo::clear_has_out_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Info_SystemInfo_NetInfo::clear_out_size() {
  out_size_ = GOOGLE_ULONGLONG(0);
  clear_has_out_size();
}
inline ::google::protobuf::uint64 Info_SystemInfo_NetInfo::out_size() const {
  return out_size_;
}
inline void Info_SystemInfo_NetInfo::set_out_size(::google::protobuf::uint64 value) {
  set_has_out_size();
  out_size_ = value;
}

// -------------------------------------------------------------------

// Info_SystemInfo

// repeated .proto_type.Info.SystemInfo.CpuInfo cpu_info = 1;
inline int Info_SystemInfo::cpu_info_size() const {
  return cpu_info_.size();
}
inline void Info_SystemInfo::clear_cpu_info() {
  cpu_info_.Clear();
}
inline const ::proto_type::Info_SystemInfo_CpuInfo& Info_SystemInfo::cpu_info(int index) const {
  return cpu_info_.Get(index);
}
inline ::proto_type::Info_SystemInfo_CpuInfo* Info_SystemInfo::mutable_cpu_info(int index) {
  return cpu_info_.Mutable(index);
}
inline ::proto_type::Info_SystemInfo_CpuInfo* Info_SystemInfo::add_cpu_info() {
  return cpu_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_type::Info_SystemInfo_CpuInfo >&
Info_SystemInfo::cpu_info() const {
  return cpu_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_type::Info_SystemInfo_CpuInfo >*
Info_SystemInfo::mutable_cpu_info() {
  return &cpu_info_;
}

// required uint64 mem_total_size = 2;
inline bool Info_SystemInfo::has_mem_total_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Info_SystemInfo::set_has_mem_total_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Info_SystemInfo::clear_has_mem_total_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Info_SystemInfo::clear_mem_total_size() {
  mem_total_size_ = GOOGLE_ULONGLONG(0);
  clear_has_mem_total_size();
}
inline ::google::protobuf::uint64 Info_SystemInfo::mem_total_size() const {
  return mem_total_size_;
}
inline void Info_SystemInfo::set_mem_total_size(::google::protobuf::uint64 value) {
  set_has_mem_total_size();
  mem_total_size_ = value;
}

// required uint32 mem_usage = 3;
inline bool Info_SystemInfo::has_mem_usage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Info_SystemInfo::set_has_mem_usage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Info_SystemInfo::clear_has_mem_usage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Info_SystemInfo::clear_mem_usage() {
  mem_usage_ = 0u;
  clear_has_mem_usage();
}
inline ::google::protobuf::uint32 Info_SystemInfo::mem_usage() const {
  return mem_usage_;
}
inline void Info_SystemInfo::set_mem_usage(::google::protobuf::uint32 value) {
  set_has_mem_usage();
  mem_usage_ = value;
}

// repeated .proto_type.Info.SystemInfo.DiskInfo disk_info = 4;
inline int Info_SystemInfo::disk_info_size() const {
  return disk_info_.size();
}
inline void Info_SystemInfo::clear_disk_info() {
  disk_info_.Clear();
}
inline const ::proto_type::Info_SystemInfo_DiskInfo& Info_SystemInfo::disk_info(int index) const {
  return disk_info_.Get(index);
}
inline ::proto_type::Info_SystemInfo_DiskInfo* Info_SystemInfo::mutable_disk_info(int index) {
  return disk_info_.Mutable(index);
}
inline ::proto_type::Info_SystemInfo_DiskInfo* Info_SystemInfo::add_disk_info() {
  return disk_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_type::Info_SystemInfo_DiskInfo >&
Info_SystemInfo::disk_info() const {
  return disk_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_type::Info_SystemInfo_DiskInfo >*
Info_SystemInfo::mutable_disk_info() {
  return &disk_info_;
}

// repeated .proto_type.Info.SystemInfo.NetInfo net_info = 5;
inline int Info_SystemInfo::net_info_size() const {
  return net_info_.size();
}
inline void Info_SystemInfo::clear_net_info() {
  net_info_.Clear();
}
inline const ::proto_type::Info_SystemInfo_NetInfo& Info_SystemInfo::net_info(int index) const {
  return net_info_.Get(index);
}
inline ::proto_type::Info_SystemInfo_NetInfo* Info_SystemInfo::mutable_net_info(int index) {
  return net_info_.Mutable(index);
}
inline ::proto_type::Info_SystemInfo_NetInfo* Info_SystemInfo::add_net_info() {
  return net_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_type::Info_SystemInfo_NetInfo >&
Info_SystemInfo::net_info() const {
  return net_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_type::Info_SystemInfo_NetInfo >*
Info_SystemInfo::mutable_net_info() {
  return &net_info_;
}

// -------------------------------------------------------------------

// Info_CacheStatusInfo

// required uint64 reads = 1;
inline bool Info_CacheStatusInfo::has_reads() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Info_CacheStatusInfo::set_has_reads() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Info_CacheStatusInfo::clear_has_reads() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Info_CacheStatusInfo::clear_reads() {
  reads_ = GOOGLE_ULONGLONG(0);
  clear_has_reads();
}
inline ::google::protobuf::uint64 Info_CacheStatusInfo::reads() const {
  return reads_;
}
inline void Info_CacheStatusInfo::set_reads(::google::protobuf::uint64 value) {
  set_has_reads();
  reads_ = value;
}

// required uint64 writes = 2;
inline bool Info_CacheStatusInfo::has_writes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Info_CacheStatusInfo::set_has_writes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Info_CacheStatusInfo::clear_has_writes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Info_CacheStatusInfo::clear_writes() {
  writes_ = GOOGLE_ULONGLONG(0);
  clear_has_writes();
}
inline ::google::protobuf::uint64 Info_CacheStatusInfo::writes() const {
  return writes_;
}
inline void Info_CacheStatusInfo::set_writes(::google::protobuf::uint64 value) {
  set_has_writes();
  writes_ = value;
}

// required uint64 blocks_read = 3;
inline bool Info_CacheStatusInfo::has_blocks_read() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Info_CacheStatusInfo::set_has_blocks_read() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Info_CacheStatusInfo::clear_has_blocks_read() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Info_CacheStatusInfo::clear_blocks_read() {
  blocks_read_ = GOOGLE_ULONGLONG(0);
  clear_has_blocks_read();
}
inline ::google::protobuf::uint64 Info_CacheStatusInfo::blocks_read() const {
  return blocks_read_;
}
inline void Info_CacheStatusInfo::set_blocks_read(::google::protobuf::uint64 value) {
  set_has_blocks_read();
  blocks_read_ = value;
}

// required uint64 blocks_write = 4;
inline bool Info_CacheStatusInfo::has_blocks_write() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Info_CacheStatusInfo::set_has_blocks_write() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Info_CacheStatusInfo::clear_has_blocks_write() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Info_CacheStatusInfo::clear_blocks_write() {
  blocks_write_ = GOOGLE_ULONGLONG(0);
  clear_has_blocks_write();
}
inline ::google::protobuf::uint64 Info_CacheStatusInfo::blocks_write() const {
  return blocks_write_;
}
inline void Info_CacheStatusInfo::set_blocks_write(::google::protobuf::uint64 value) {
  set_has_blocks_write();
  blocks_write_ = value;
}

// required uint64 blocks_read_hit = 5;
inline bool Info_CacheStatusInfo::has_blocks_read_hit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Info_CacheStatusInfo::set_has_blocks_read_hit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Info_CacheStatusInfo::clear_has_blocks_read_hit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Info_CacheStatusInfo::clear_blocks_read_hit() {
  blocks_read_hit_ = GOOGLE_ULONGLONG(0);
  clear_has_blocks_read_hit();
}
inline ::google::protobuf::uint64 Info_CacheStatusInfo::blocks_read_hit() const {
  return blocks_read_hit_;
}
inline void Info_CacheStatusInfo::set_blocks_read_hit(::google::protobuf::uint64 value) {
  set_has_blocks_read_hit();
  blocks_read_hit_ = value;
}

// required uint64 write_to_disk_directly = 6;
inline bool Info_CacheStatusInfo::has_write_to_disk_directly() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Info_CacheStatusInfo::set_has_write_to_disk_directly() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Info_CacheStatusInfo::clear_has_write_to_disk_directly() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Info_CacheStatusInfo::clear_write_to_disk_directly() {
  write_to_disk_directly_ = GOOGLE_ULONGLONG(0);
  clear_has_write_to_disk_directly();
}
inline ::google::protobuf::uint64 Info_CacheStatusInfo::write_to_disk_directly() const {
  return write_to_disk_directly_;
}
inline void Info_CacheStatusInfo::set_write_to_disk_directly(::google::protobuf::uint64 value) {
  set_has_write_to_disk_directly();
  write_to_disk_directly_ = value;
}

// required uint64 read_cache_size = 7;
inline bool Info_CacheStatusInfo::has_read_cache_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Info_CacheStatusInfo::set_has_read_cache_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Info_CacheStatusInfo::clear_has_read_cache_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Info_CacheStatusInfo::clear_read_cache_size() {
  read_cache_size_ = GOOGLE_ULONGLONG(0);
  clear_has_read_cache_size();
}
inline ::google::protobuf::uint64 Info_CacheStatusInfo::read_cache_size() const {
  return read_cache_size_;
}
inline void Info_CacheStatusInfo::set_read_cache_size(::google::protobuf::uint64 value) {
  set_has_read_cache_size();
  read_cache_size_ = value;
}

// required uint64 finished_write_cache_size = 8;
inline bool Info_CacheStatusInfo::has_finished_write_cache_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Info_CacheStatusInfo::set_has_finished_write_cache_size() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Info_CacheStatusInfo::clear_has_finished_write_cache_size() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Info_CacheStatusInfo::clear_finished_write_cache_size() {
  finished_write_cache_size_ = GOOGLE_ULONGLONG(0);
  clear_has_finished_write_cache_size();
}
inline ::google::protobuf::uint64 Info_CacheStatusInfo::finished_write_cache_size() const {
  return finished_write_cache_size_;
}
inline void Info_CacheStatusInfo::set_finished_write_cache_size(::google::protobuf::uint64 value) {
  set_has_finished_write_cache_size();
  finished_write_cache_size_ = value;
}

// required uint64 unfinished_write_cache_size = 9;
inline bool Info_CacheStatusInfo::has_unfinished_write_cache_size() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Info_CacheStatusInfo::set_has_unfinished_write_cache_size() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Info_CacheStatusInfo::clear_has_unfinished_write_cache_size() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Info_CacheStatusInfo::clear_unfinished_write_cache_size() {
  unfinished_write_cache_size_ = GOOGLE_ULONGLONG(0);
  clear_has_unfinished_write_cache_size();
}
inline ::google::protobuf::uint64 Info_CacheStatusInfo::unfinished_write_cache_size() const {
  return unfinished_write_cache_size_;
}
inline void Info_CacheStatusInfo::set_unfinished_write_cache_size(::google::protobuf::uint64 value) {
  set_has_unfinished_write_cache_size();
  unfinished_write_cache_size_ = value;
}

// -------------------------------------------------------------------

// Info

// repeated .proto_type.Info.SessionInfo session_info = 1;
inline int Info::session_info_size() const {
  return session_info_.size();
}
inline void Info::clear_session_info() {
  session_info_.Clear();
}
inline const ::proto_type::Info_SessionInfo& Info::session_info(int index) const {
  return session_info_.Get(index);
}
inline ::proto_type::Info_SessionInfo* Info::mutable_session_info(int index) {
  return session_info_.Mutable(index);
}
inline ::proto_type::Info_SessionInfo* Info::add_session_info() {
  return session_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_type::Info_SessionInfo >&
Info::session_info() const {
  return session_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_type::Info_SessionInfo >*
Info::mutable_session_info() {
  return &session_info_;
}

// repeated .proto_type.Info.TorrentInfo torrent_info = 2;
inline int Info::torrent_info_size() const {
  return torrent_info_.size();
}
inline void Info::clear_torrent_info() {
  torrent_info_.Clear();
}
inline const ::proto_type::Info_TorrentInfo& Info::torrent_info(int index) const {
  return torrent_info_.Get(index);
}
inline ::proto_type::Info_TorrentInfo* Info::mutable_torrent_info(int index) {
  return torrent_info_.Mutable(index);
}
inline ::proto_type::Info_TorrentInfo* Info::add_torrent_info() {
  return torrent_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_type::Info_TorrentInfo >&
Info::torrent_info() const {
  return torrent_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_type::Info_TorrentInfo >*
Info::mutable_torrent_info() {
  return &torrent_info_;
}

// repeated .proto_type.Info.PeerInfo peer_info = 3;
inline int Info::peer_info_size() const {
  return peer_info_.size();
}
inline void Info::clear_peer_info() {
  peer_info_.Clear();
}
inline const ::proto_type::Info_PeerInfo& Info::peer_info(int index) const {
  return peer_info_.Get(index);
}
inline ::proto_type::Info_PeerInfo* Info::mutable_peer_info(int index) {
  return peer_info_.Mutable(index);
}
inline ::proto_type::Info_PeerInfo* Info::add_peer_info() {
  return peer_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_type::Info_PeerInfo >&
Info::peer_info() const {
  return peer_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_type::Info_PeerInfo >*
Info::mutable_peer_info() {
  return &peer_info_;
}

// optional .proto_type.Info.SystemInfo system_info = 4;
inline bool Info::has_system_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Info::set_has_system_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Info::clear_has_system_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Info::clear_system_info() {
  if (system_info_ != NULL) system_info_->::proto_type::Info_SystemInfo::Clear();
  clear_has_system_info();
}
inline const ::proto_type::Info_SystemInfo& Info::system_info() const {
  return system_info_ != NULL ? *system_info_ : *default_instance_->system_info_;
}
inline ::proto_type::Info_SystemInfo* Info::mutable_system_info() {
  set_has_system_info();
  if (system_info_ == NULL) system_info_ = new ::proto_type::Info_SystemInfo;
  return system_info_;
}
inline ::proto_type::Info_SystemInfo* Info::release_system_info() {
  clear_has_system_info();
  ::proto_type::Info_SystemInfo* temp = system_info_;
  system_info_ = NULL;
  return temp;
}

// optional .proto_type.Info.CacheStatusInfo cache_status_info = 5;
inline bool Info::has_cache_status_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Info::set_has_cache_status_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Info::clear_has_cache_status_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Info::clear_cache_status_info() {
  if (cache_status_info_ != NULL) cache_status_info_->::proto_type::Info_CacheStatusInfo::Clear();
  clear_has_cache_status_info();
}
inline const ::proto_type::Info_CacheStatusInfo& Info::cache_status_info() const {
  return cache_status_info_ != NULL ? *cache_status_info_ : *default_instance_->cache_status_info_;
}
inline ::proto_type::Info_CacheStatusInfo* Info::mutable_cache_status_info() {
  set_has_cache_status_info();
  if (cache_status_info_ == NULL) cache_status_info_ = new ::proto_type::Info_CacheStatusInfo;
  return cache_status_info_;
}
inline ::proto_type::Info_CacheStatusInfo* Info::release_cache_status_info() {
  clear_has_cache_status_info();
  ::proto_type::Info_CacheStatusInfo* temp = cache_status_info_;
  cache_status_info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Command

// repeated string command = 1;
inline int Command::command_size() const {
  return command_.size();
}
inline void Command::clear_command() {
  command_.Clear();
}
inline const ::std::string& Command::command(int index) const {
  return command_.Get(index);
}
inline ::std::string* Command::mutable_command(int index) {
  return command_.Mutable(index);
}
inline void Command::set_command(int index, const ::std::string& value) {
  command_.Mutable(index)->assign(value);
}
inline void Command::set_command(int index, const char* value) {
  command_.Mutable(index)->assign(value);
}
inline void Command::set_command(int index, const char* value, size_t size) {
  command_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Command::add_command() {
  return command_.Add();
}
inline void Command::add_command(const ::std::string& value) {
  command_.Add()->assign(value);
}
inline void Command::add_command(const char* value) {
  command_.Add()->assign(value);
}
inline void Command::add_command(const char* value, size_t size) {
  command_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Command::command() const {
  return command_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Command::mutable_command() {
  return &command_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_type

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2eproto__INCLUDED
