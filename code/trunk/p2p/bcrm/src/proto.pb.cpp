// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto.pb.hpp"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_type {

namespace {

const ::google::protobuf::Descriptor* Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* Info_SessionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Info_SessionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Info_TorrentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Info_TorrentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Info_PeerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Info_PeerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Info_SystemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Info_SystemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Info_SystemInfo_CpuInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Info_SystemInfo_CpuInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Info_SystemInfo_DiskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Info_SystemInfo_DiskInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Info_SystemInfo_NetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Info_SystemInfo_NetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Info_CacheStatusInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Info_CacheStatusInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Command_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2eproto() {
  protobuf_AddDesc_proto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto.proto");
  GOOGLE_CHECK(file != NULL);
  Info_descriptor_ = file->message_type(0);
  static const int Info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, session_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, torrent_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, peer_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, system_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, cache_status_info_),
  };
  Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Info_descriptor_,
      Info::default_instance_,
      Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Info));
  Info_SessionInfo_descriptor_ = Info_descriptor_->nested_type(0);
  static const int Info_SessionInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_SessionInfo, session_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_SessionInfo, torrent_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_SessionInfo, peer_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_SessionInfo, upload_bandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_SessionInfo, download_bandwidth_),
  };
  Info_SessionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Info_SessionInfo_descriptor_,
      Info_SessionInfo::default_instance_,
      Info_SessionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_SessionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_SessionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Info_SessionInfo));
  Info_TorrentInfo_descriptor_ = Info_descriptor_->nested_type(1);
  static const int Info_TorrentInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_TorrentInfo, info_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_TorrentInfo, complete_precent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_TorrentInfo, inner_peer_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_TorrentInfo, outer_peer_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_TorrentInfo, alive_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_TorrentInfo, upload_bandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_TorrentInfo, download_bandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_TorrentInfo, total_upload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_TorrentInfo, total_download_),
  };
  Info_TorrentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Info_TorrentInfo_descriptor_,
      Info_TorrentInfo::default_instance_,
      Info_TorrentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_TorrentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_TorrentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Info_TorrentInfo));
  Info_PeerInfo_descriptor_ = Info_descriptor_->nested_type(2);
  static const int Info_PeerInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_PeerInfo, peer_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_PeerInfo, peer_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_PeerInfo, complete_precent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_PeerInfo, alive_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_PeerInfo, upload_bandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_PeerInfo, download_bandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_PeerInfo, upload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_PeerInfo, download_),
  };
  Info_PeerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Info_PeerInfo_descriptor_,
      Info_PeerInfo::default_instance_,
      Info_PeerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_PeerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_PeerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Info_PeerInfo));
  Info_SystemInfo_descriptor_ = Info_descriptor_->nested_type(3);
  static const int Info_SystemInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_SystemInfo, cpu_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_SystemInfo, mem_total_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_SystemInfo, mem_usage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_SystemInfo, disk_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_SystemInfo, net_info_),
  };
  Info_SystemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Info_SystemInfo_descriptor_,
      Info_SystemInfo::default_instance_,
      Info_SystemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_SystemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_SystemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Info_SystemInfo));
  Info_SystemInfo_CpuInfo_descriptor_ = Info_SystemInfo_descriptor_->nested_type(0);
  static const int Info_SystemInfo_CpuInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_SystemInfo_CpuInfo, cpu_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_SystemInfo_CpuInfo, cpu_usage_),
  };
  Info_SystemInfo_CpuInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Info_SystemInfo_CpuInfo_descriptor_,
      Info_SystemInfo_CpuInfo::default_instance_,
      Info_SystemInfo_CpuInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_SystemInfo_CpuInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_SystemInfo_CpuInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Info_SystemInfo_CpuInfo));
  Info_SystemInfo_DiskInfo_descriptor_ = Info_SystemInfo_descriptor_->nested_type(1);
  static const int Info_SystemInfo_DiskInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_SystemInfo_DiskInfo, disk_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_SystemInfo_DiskInfo, total_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_SystemInfo_DiskInfo, usage_),
  };
  Info_SystemInfo_DiskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Info_SystemInfo_DiskInfo_descriptor_,
      Info_SystemInfo_DiskInfo::default_instance_,
      Info_SystemInfo_DiskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_SystemInfo_DiskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_SystemInfo_DiskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Info_SystemInfo_DiskInfo));
  Info_SystemInfo_NetInfo_descriptor_ = Info_SystemInfo_descriptor_->nested_type(2);
  static const int Info_SystemInfo_NetInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_SystemInfo_NetInfo, net_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_SystemInfo_NetInfo, in_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_SystemInfo_NetInfo, out_size_),
  };
  Info_SystemInfo_NetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Info_SystemInfo_NetInfo_descriptor_,
      Info_SystemInfo_NetInfo::default_instance_,
      Info_SystemInfo_NetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_SystemInfo_NetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_SystemInfo_NetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Info_SystemInfo_NetInfo));
  Info_CacheStatusInfo_descriptor_ = Info_descriptor_->nested_type(4);
  static const int Info_CacheStatusInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_CacheStatusInfo, reads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_CacheStatusInfo, writes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_CacheStatusInfo, blocks_read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_CacheStatusInfo, blocks_write_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_CacheStatusInfo, blocks_read_hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_CacheStatusInfo, write_to_disk_directly_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_CacheStatusInfo, read_cache_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_CacheStatusInfo, finished_write_cache_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_CacheStatusInfo, unfinished_write_cache_size_),
  };
  Info_CacheStatusInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Info_CacheStatusInfo_descriptor_,
      Info_CacheStatusInfo::default_instance_,
      Info_CacheStatusInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_CacheStatusInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info_CacheStatusInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Info_CacheStatusInfo));
  Command_descriptor_ = file->message_type(1);
  static const int Command_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, command_),
  };
  Command_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Command_descriptor_,
      Command::default_instance_,
      Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Command));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Info_descriptor_, &Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Info_SessionInfo_descriptor_, &Info_SessionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Info_TorrentInfo_descriptor_, &Info_TorrentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Info_PeerInfo_descriptor_, &Info_PeerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Info_SystemInfo_descriptor_, &Info_SystemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Info_SystemInfo_CpuInfo_descriptor_, &Info_SystemInfo_CpuInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Info_SystemInfo_DiskInfo_descriptor_, &Info_SystemInfo_DiskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Info_SystemInfo_NetInfo_descriptor_, &Info_SystemInfo_NetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Info_CacheStatusInfo_descriptor_, &Info_CacheStatusInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Command_descriptor_, &Command::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2eproto() {
  delete Info::default_instance_;
  delete Info_reflection_;
  delete Info_SessionInfo::default_instance_;
  delete Info_SessionInfo_reflection_;
  delete Info_TorrentInfo::default_instance_;
  delete Info_TorrentInfo_reflection_;
  delete Info_PeerInfo::default_instance_;
  delete Info_PeerInfo_reflection_;
  delete Info_SystemInfo::default_instance_;
  delete Info_SystemInfo_reflection_;
  delete Info_SystemInfo_CpuInfo::default_instance_;
  delete Info_SystemInfo_CpuInfo_reflection_;
  delete Info_SystemInfo_DiskInfo::default_instance_;
  delete Info_SystemInfo_DiskInfo_reflection_;
  delete Info_SystemInfo_NetInfo::default_instance_;
  delete Info_SystemInfo_NetInfo_reflection_;
  delete Info_CacheStatusInfo::default_instance_;
  delete Info_CacheStatusInfo_reflection_;
  delete Command::default_instance_;
  delete Command_reflection_;
}

void protobuf_AddDesc_proto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013proto.proto\022\nproto_type\"\265\013\n\004Info\0222\n\014se"
    "ssion_info\030\001 \003(\0132\034.proto_type.Info.Sessi"
    "onInfo\0222\n\014torrent_info\030\002 \003(\0132\034.proto_typ"
    "e.Info.TorrentInfo\022,\n\tpeer_info\030\003 \003(\0132\031."
    "proto_type.Info.PeerInfo\0220\n\013system_info\030"
    "\004 \001(\0132\033.proto_type.Info.SystemInfo\022;\n\021ca"
    "che_status_info\030\005 \001(\0132 .proto_type.Info."
    "CacheStatusInfo\032\200\001\n\013SessionInfo\022\024\n\014sessi"
    "on_type\030\001 \002(\t\022\023\n\013torrent_num\030\002 \002(\r\022\020\n\010pe"
    "er_num\030\003 \002(\r\022\030\n\020upload_bandwidth\030\004 \002(\004\022\032"
    "\n\022download_bandwidth\030\005 \002(\004\032\342\001\n\013TorrentIn"
    "fo\022\021\n\tinfo_hash\030\001 \002(\t\022\030\n\020complete_precen"
    "t\030\002 \002(\r\022\026\n\016inner_peer_num\030\003 \002(\r\022\026\n\016outer"
    "_peer_num\030\004 \002(\r\022\022\n\nalive_time\030\005 \002(\r\022\030\n\020u"
    "pload_bandwidth\030\006 \002(\004\022\032\n\022download_bandwi"
    "dth\030\007 \002(\004\022\024\n\014total_upload\030\010 \002(\004\022\026\n\016total"
    "_download\030\t \002(\004\032\264\001\n\010PeerInfo\022\017\n\007peer_ip\030"
    "\001 \002(\r\022\021\n\tpeer_type\030\002 \002(\t\022\030\n\020complete_pre"
    "cent\030\003 \002(\r\022\022\n\nalive_time\030\004 \002(\r\022\030\n\020upload"
    "_bandwidth\030\005 \002(\004\022\032\n\022download_bandwidth\030\006"
    " \002(\004\022\016\n\006upload\030\007 \002(\004\022\020\n\010download\030\010 \002(\004\032\220"
    "\003\n\nSystemInfo\0225\n\010cpu_info\030\001 \003(\0132#.proto_"
    "type.Info.SystemInfo.CpuInfo\022\026\n\016mem_tota"
    "l_size\030\002 \002(\004\022\021\n\tmem_usage\030\003 \002(\r\0227\n\tdisk_"
    "info\030\004 \003(\0132$.proto_type.Info.SystemInfo."
    "DiskInfo\0225\n\010net_info\030\005 \003(\0132#.proto_type."
    "Info.SystemInfo.NetInfo\032.\n\007CpuInfo\022\020\n\010cp"
    "u_name\030\001 \002(\t\022\021\n\tcpu_usage\030\002 \002(\r\032@\n\010DiskI"
    "nfo\022\021\n\tdisk_name\030\001 \002(\t\022\022\n\ntotal_size\030\002 \002"
    "(\004\022\r\n\005usage\030\003 \002(\r\032>\n\007NetInfo\022\020\n\010net_name"
    "\030\001 \002(\t\022\017\n\007in_size\030\002 \002(\004\022\020\n\010out_size\030\003 \002("
    "\004\032\365\001\n\017CacheStatusInfo\022\r\n\005reads\030\001 \002(\004\022\016\n\006"
    "writes\030\002 \002(\004\022\023\n\013blocks_read\030\003 \002(\004\022\024\n\014blo"
    "cks_write\030\004 \002(\004\022\027\n\017blocks_read_hit\030\005 \002(\004"
    "\022\036\n\026write_to_disk_directly\030\006 \002(\004\022\027\n\017read"
    "_cache_size\030\007 \002(\004\022!\n\031finished_write_cach"
    "e_size\030\010 \002(\004\022#\n\033unfinished_write_cache_s"
    "ize\030\t \002(\004\"\032\n\007Command\022\017\n\007command\030\001 \003(\t", 1517);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto.proto", &protobuf_RegisterTypes);
  Info::default_instance_ = new Info();
  Info_SessionInfo::default_instance_ = new Info_SessionInfo();
  Info_TorrentInfo::default_instance_ = new Info_TorrentInfo();
  Info_PeerInfo::default_instance_ = new Info_PeerInfo();
  Info_SystemInfo::default_instance_ = new Info_SystemInfo();
  Info_SystemInfo_CpuInfo::default_instance_ = new Info_SystemInfo_CpuInfo();
  Info_SystemInfo_DiskInfo::default_instance_ = new Info_SystemInfo_DiskInfo();
  Info_SystemInfo_NetInfo::default_instance_ = new Info_SystemInfo_NetInfo();
  Info_CacheStatusInfo::default_instance_ = new Info_CacheStatusInfo();
  Command::default_instance_ = new Command();
  Info::default_instance_->InitAsDefaultInstance();
  Info_SessionInfo::default_instance_->InitAsDefaultInstance();
  Info_TorrentInfo::default_instance_->InitAsDefaultInstance();
  Info_PeerInfo::default_instance_->InitAsDefaultInstance();
  Info_SystemInfo::default_instance_->InitAsDefaultInstance();
  Info_SystemInfo_CpuInfo::default_instance_->InitAsDefaultInstance();
  Info_SystemInfo_DiskInfo::default_instance_->InitAsDefaultInstance();
  Info_SystemInfo_NetInfo::default_instance_->InitAsDefaultInstance();
  Info_CacheStatusInfo::default_instance_->InitAsDefaultInstance();
  Command::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2eproto {
  StaticDescriptorInitializer_proto_2eproto() {
    protobuf_AddDesc_proto_2eproto();
  }
} static_descriptor_initializer_proto_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Info_SessionInfo::kSessionTypeFieldNumber;
const int Info_SessionInfo::kTorrentNumFieldNumber;
const int Info_SessionInfo::kPeerNumFieldNumber;
const int Info_SessionInfo::kUploadBandwidthFieldNumber;
const int Info_SessionInfo::kDownloadBandwidthFieldNumber;
#endif  // !_MSC_VER

Info_SessionInfo::Info_SessionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Info_SessionInfo::InitAsDefaultInstance() {
}

Info_SessionInfo::Info_SessionInfo(const Info_SessionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Info_SessionInfo::SharedCtor() {
  _cached_size_ = 0;
  session_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  torrent_num_ = 0u;
  peer_num_ = 0u;
  upload_bandwidth_ = GOOGLE_ULONGLONG(0);
  download_bandwidth_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Info_SessionInfo::~Info_SessionInfo() {
  SharedDtor();
}

void Info_SessionInfo::SharedDtor() {
  if (session_type_ != &::google::protobuf::internal::kEmptyString) {
    delete session_type_;
  }
  if (this != default_instance_) {
  }
}

void Info_SessionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Info_SessionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Info_SessionInfo_descriptor_;
}

const Info_SessionInfo& Info_SessionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2eproto();  return *default_instance_;
}

Info_SessionInfo* Info_SessionInfo::default_instance_ = NULL;

Info_SessionInfo* Info_SessionInfo::New() const {
  return new Info_SessionInfo;
}

void Info_SessionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session_type()) {
      if (session_type_ != &::google::protobuf::internal::kEmptyString) {
        session_type_->clear();
      }
    }
    torrent_num_ = 0u;
    peer_num_ = 0u;
    upload_bandwidth_ = GOOGLE_ULONGLONG(0);
    download_bandwidth_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Info_SessionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string session_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_type().data(), this->session_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_torrent_num;
        break;
      }
      
      // required uint32 torrent_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_torrent_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &torrent_num_)));
          set_has_torrent_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_peer_num;
        break;
      }
      
      // required uint32 peer_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_peer_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peer_num_)));
          set_has_peer_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_upload_bandwidth;
        break;
      }
      
      // required uint64 upload_bandwidth = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upload_bandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &upload_bandwidth_)));
          set_has_upload_bandwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_download_bandwidth;
        break;
      }
      
      // required uint64 download_bandwidth = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_download_bandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &download_bandwidth_)));
          set_has_download_bandwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Info_SessionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string session_type = 1;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_type().data(), this->session_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->session_type(), output);
  }
  
  // required uint32 torrent_num = 2;
  if (has_torrent_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->torrent_num(), output);
  }
  
  // required uint32 peer_num = 3;
  if (has_peer_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->peer_num(), output);
  }
  
  // required uint64 upload_bandwidth = 4;
  if (has_upload_bandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->upload_bandwidth(), output);
  }
  
  // required uint64 download_bandwidth = 5;
  if (has_download_bandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->download_bandwidth(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Info_SessionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string session_type = 1;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_type().data(), this->session_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_type(), target);
  }
  
  // required uint32 torrent_num = 2;
  if (has_torrent_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->torrent_num(), target);
  }
  
  // required uint32 peer_num = 3;
  if (has_peer_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->peer_num(), target);
  }
  
  // required uint64 upload_bandwidth = 4;
  if (has_upload_bandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->upload_bandwidth(), target);
  }
  
  // required uint64 download_bandwidth = 5;
  if (has_download_bandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->download_bandwidth(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Info_SessionInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string session_type = 1;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_type());
    }
    
    // required uint32 torrent_num = 2;
    if (has_torrent_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->torrent_num());
    }
    
    // required uint32 peer_num = 3;
    if (has_peer_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->peer_num());
    }
    
    // required uint64 upload_bandwidth = 4;
    if (has_upload_bandwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->upload_bandwidth());
    }
    
    // required uint64 download_bandwidth = 5;
    if (has_download_bandwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->download_bandwidth());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Info_SessionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Info_SessionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Info_SessionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Info_SessionInfo::MergeFrom(const Info_SessionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_torrent_num()) {
      set_torrent_num(from.torrent_num());
    }
    if (from.has_peer_num()) {
      set_peer_num(from.peer_num());
    }
    if (from.has_upload_bandwidth()) {
      set_upload_bandwidth(from.upload_bandwidth());
    }
    if (from.has_download_bandwidth()) {
      set_download_bandwidth(from.download_bandwidth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Info_SessionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Info_SessionInfo::CopyFrom(const Info_SessionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Info_SessionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void Info_SessionInfo::Swap(Info_SessionInfo* other) {
  if (other != this) {
    std::swap(session_type_, other->session_type_);
    std::swap(torrent_num_, other->torrent_num_);
    std::swap(peer_num_, other->peer_num_);
    std::swap(upload_bandwidth_, other->upload_bandwidth_);
    std::swap(download_bandwidth_, other->download_bandwidth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Info_SessionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Info_SessionInfo_descriptor_;
  metadata.reflection = Info_SessionInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Info_TorrentInfo::kInfoHashFieldNumber;
const int Info_TorrentInfo::kCompletePrecentFieldNumber;
const int Info_TorrentInfo::kInnerPeerNumFieldNumber;
const int Info_TorrentInfo::kOuterPeerNumFieldNumber;
const int Info_TorrentInfo::kAliveTimeFieldNumber;
const int Info_TorrentInfo::kUploadBandwidthFieldNumber;
const int Info_TorrentInfo::kDownloadBandwidthFieldNumber;
const int Info_TorrentInfo::kTotalUploadFieldNumber;
const int Info_TorrentInfo::kTotalDownloadFieldNumber;
#endif  // !_MSC_VER

Info_TorrentInfo::Info_TorrentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Info_TorrentInfo::InitAsDefaultInstance() {
}

Info_TorrentInfo::Info_TorrentInfo(const Info_TorrentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Info_TorrentInfo::SharedCtor() {
  _cached_size_ = 0;
  info_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  complete_precent_ = 0u;
  inner_peer_num_ = 0u;
  outer_peer_num_ = 0u;
  alive_time_ = 0u;
  upload_bandwidth_ = GOOGLE_ULONGLONG(0);
  download_bandwidth_ = GOOGLE_ULONGLONG(0);
  total_upload_ = GOOGLE_ULONGLONG(0);
  total_download_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Info_TorrentInfo::~Info_TorrentInfo() {
  SharedDtor();
}

void Info_TorrentInfo::SharedDtor() {
  if (info_hash_ != &::google::protobuf::internal::kEmptyString) {
    delete info_hash_;
  }
  if (this != default_instance_) {
  }
}

void Info_TorrentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Info_TorrentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Info_TorrentInfo_descriptor_;
}

const Info_TorrentInfo& Info_TorrentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2eproto();  return *default_instance_;
}

Info_TorrentInfo* Info_TorrentInfo::default_instance_ = NULL;

Info_TorrentInfo* Info_TorrentInfo::New() const {
  return new Info_TorrentInfo;
}

void Info_TorrentInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info_hash()) {
      if (info_hash_ != &::google::protobuf::internal::kEmptyString) {
        info_hash_->clear();
      }
    }
    complete_precent_ = 0u;
    inner_peer_num_ = 0u;
    outer_peer_num_ = 0u;
    alive_time_ = 0u;
    upload_bandwidth_ = GOOGLE_ULONGLONG(0);
    download_bandwidth_ = GOOGLE_ULONGLONG(0);
    total_upload_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    total_download_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Info_TorrentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string info_hash = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->info_hash().data(), this->info_hash().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_complete_precent;
        break;
      }
      
      // required uint32 complete_precent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_complete_precent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &complete_precent_)));
          set_has_complete_precent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_inner_peer_num;
        break;
      }
      
      // required uint32 inner_peer_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inner_peer_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inner_peer_num_)));
          set_has_inner_peer_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_outer_peer_num;
        break;
      }
      
      // required uint32 outer_peer_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outer_peer_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &outer_peer_num_)));
          set_has_outer_peer_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_alive_time;
        break;
      }
      
      // required uint32 alive_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alive_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &alive_time_)));
          set_has_alive_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_upload_bandwidth;
        break;
      }
      
      // required uint64 upload_bandwidth = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upload_bandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &upload_bandwidth_)));
          set_has_upload_bandwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_download_bandwidth;
        break;
      }
      
      // required uint64 download_bandwidth = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_download_bandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &download_bandwidth_)));
          set_has_download_bandwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_total_upload;
        break;
      }
      
      // required uint64 total_upload = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_upload:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_upload_)));
          set_has_total_upload();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_total_download;
        break;
      }
      
      // required uint64 total_download = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_download:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_download_)));
          set_has_total_download();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Info_TorrentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string info_hash = 1;
  if (has_info_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info_hash().data(), this->info_hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->info_hash(), output);
  }
  
  // required uint32 complete_precent = 2;
  if (has_complete_precent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->complete_precent(), output);
  }
  
  // required uint32 inner_peer_num = 3;
  if (has_inner_peer_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->inner_peer_num(), output);
  }
  
  // required uint32 outer_peer_num = 4;
  if (has_outer_peer_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->outer_peer_num(), output);
  }
  
  // required uint32 alive_time = 5;
  if (has_alive_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->alive_time(), output);
  }
  
  // required uint64 upload_bandwidth = 6;
  if (has_upload_bandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->upload_bandwidth(), output);
  }
  
  // required uint64 download_bandwidth = 7;
  if (has_download_bandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->download_bandwidth(), output);
  }
  
  // required uint64 total_upload = 8;
  if (has_total_upload()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->total_upload(), output);
  }
  
  // required uint64 total_download = 9;
  if (has_total_download()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->total_download(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Info_TorrentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string info_hash = 1;
  if (has_info_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info_hash().data(), this->info_hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->info_hash(), target);
  }
  
  // required uint32 complete_precent = 2;
  if (has_complete_precent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->complete_precent(), target);
  }
  
  // required uint32 inner_peer_num = 3;
  if (has_inner_peer_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->inner_peer_num(), target);
  }
  
  // required uint32 outer_peer_num = 4;
  if (has_outer_peer_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->outer_peer_num(), target);
  }
  
  // required uint32 alive_time = 5;
  if (has_alive_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->alive_time(), target);
  }
  
  // required uint64 upload_bandwidth = 6;
  if (has_upload_bandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->upload_bandwidth(), target);
  }
  
  // required uint64 download_bandwidth = 7;
  if (has_download_bandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->download_bandwidth(), target);
  }
  
  // required uint64 total_upload = 8;
  if (has_total_upload()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->total_upload(), target);
  }
  
  // required uint64 total_download = 9;
  if (has_total_download()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->total_download(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Info_TorrentInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string info_hash = 1;
    if (has_info_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info_hash());
    }
    
    // required uint32 complete_precent = 2;
    if (has_complete_precent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->complete_precent());
    }
    
    // required uint32 inner_peer_num = 3;
    if (has_inner_peer_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inner_peer_num());
    }
    
    // required uint32 outer_peer_num = 4;
    if (has_outer_peer_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->outer_peer_num());
    }
    
    // required uint32 alive_time = 5;
    if (has_alive_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->alive_time());
    }
    
    // required uint64 upload_bandwidth = 6;
    if (has_upload_bandwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->upload_bandwidth());
    }
    
    // required uint64 download_bandwidth = 7;
    if (has_download_bandwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->download_bandwidth());
    }
    
    // required uint64 total_upload = 8;
    if (has_total_upload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_upload());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint64 total_download = 9;
    if (has_total_download()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_download());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Info_TorrentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Info_TorrentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Info_TorrentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Info_TorrentInfo::MergeFrom(const Info_TorrentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info_hash()) {
      set_info_hash(from.info_hash());
    }
    if (from.has_complete_precent()) {
      set_complete_precent(from.complete_precent());
    }
    if (from.has_inner_peer_num()) {
      set_inner_peer_num(from.inner_peer_num());
    }
    if (from.has_outer_peer_num()) {
      set_outer_peer_num(from.outer_peer_num());
    }
    if (from.has_alive_time()) {
      set_alive_time(from.alive_time());
    }
    if (from.has_upload_bandwidth()) {
      set_upload_bandwidth(from.upload_bandwidth());
    }
    if (from.has_download_bandwidth()) {
      set_download_bandwidth(from.download_bandwidth());
    }
    if (from.has_total_upload()) {
      set_total_upload(from.total_upload());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_total_download()) {
      set_total_download(from.total_download());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Info_TorrentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Info_TorrentInfo::CopyFrom(const Info_TorrentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Info_TorrentInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  
  return true;
}

void Info_TorrentInfo::Swap(Info_TorrentInfo* other) {
  if (other != this) {
    std::swap(info_hash_, other->info_hash_);
    std::swap(complete_precent_, other->complete_precent_);
    std::swap(inner_peer_num_, other->inner_peer_num_);
    std::swap(outer_peer_num_, other->outer_peer_num_);
    std::swap(alive_time_, other->alive_time_);
    std::swap(upload_bandwidth_, other->upload_bandwidth_);
    std::swap(download_bandwidth_, other->download_bandwidth_);
    std::swap(total_upload_, other->total_upload_);
    std::swap(total_download_, other->total_download_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Info_TorrentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Info_TorrentInfo_descriptor_;
  metadata.reflection = Info_TorrentInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Info_PeerInfo::kPeerIpFieldNumber;
const int Info_PeerInfo::kPeerTypeFieldNumber;
const int Info_PeerInfo::kCompletePrecentFieldNumber;
const int Info_PeerInfo::kAliveTimeFieldNumber;
const int Info_PeerInfo::kUploadBandwidthFieldNumber;
const int Info_PeerInfo::kDownloadBandwidthFieldNumber;
const int Info_PeerInfo::kUploadFieldNumber;
const int Info_PeerInfo::kDownloadFieldNumber;
#endif  // !_MSC_VER

Info_PeerInfo::Info_PeerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Info_PeerInfo::InitAsDefaultInstance() {
}

Info_PeerInfo::Info_PeerInfo(const Info_PeerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Info_PeerInfo::SharedCtor() {
  _cached_size_ = 0;
  peer_ip_ = 0u;
  peer_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  complete_precent_ = 0u;
  alive_time_ = 0u;
  upload_bandwidth_ = GOOGLE_ULONGLONG(0);
  download_bandwidth_ = GOOGLE_ULONGLONG(0);
  upload_ = GOOGLE_ULONGLONG(0);
  download_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Info_PeerInfo::~Info_PeerInfo() {
  SharedDtor();
}

void Info_PeerInfo::SharedDtor() {
  if (peer_type_ != &::google::protobuf::internal::kEmptyString) {
    delete peer_type_;
  }
  if (this != default_instance_) {
  }
}

void Info_PeerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Info_PeerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Info_PeerInfo_descriptor_;
}

const Info_PeerInfo& Info_PeerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2eproto();  return *default_instance_;
}

Info_PeerInfo* Info_PeerInfo::default_instance_ = NULL;

Info_PeerInfo* Info_PeerInfo::New() const {
  return new Info_PeerInfo;
}

void Info_PeerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    peer_ip_ = 0u;
    if (has_peer_type()) {
      if (peer_type_ != &::google::protobuf::internal::kEmptyString) {
        peer_type_->clear();
      }
    }
    complete_precent_ = 0u;
    alive_time_ = 0u;
    upload_bandwidth_ = GOOGLE_ULONGLONG(0);
    download_bandwidth_ = GOOGLE_ULONGLONG(0);
    upload_ = GOOGLE_ULONGLONG(0);
    download_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Info_PeerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 peer_ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peer_ip_)));
          set_has_peer_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_peer_type;
        break;
      }
      
      // required string peer_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peer_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->peer_type().data(), this->peer_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_complete_precent;
        break;
      }
      
      // required uint32 complete_precent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_complete_precent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &complete_precent_)));
          set_has_complete_precent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_alive_time;
        break;
      }
      
      // required uint32 alive_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alive_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &alive_time_)));
          set_has_alive_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_upload_bandwidth;
        break;
      }
      
      // required uint64 upload_bandwidth = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upload_bandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &upload_bandwidth_)));
          set_has_upload_bandwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_download_bandwidth;
        break;
      }
      
      // required uint64 download_bandwidth = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_download_bandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &download_bandwidth_)));
          set_has_download_bandwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_upload;
        break;
      }
      
      // required uint64 upload = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upload:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &upload_)));
          set_has_upload();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_download;
        break;
      }
      
      // required uint64 download = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_download:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &download_)));
          set_has_download();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Info_PeerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 peer_ip = 1;
  if (has_peer_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->peer_ip(), output);
  }
  
  // required string peer_type = 2;
  if (has_peer_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peer_type().data(), this->peer_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->peer_type(), output);
  }
  
  // required uint32 complete_precent = 3;
  if (has_complete_precent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->complete_precent(), output);
  }
  
  // required uint32 alive_time = 4;
  if (has_alive_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->alive_time(), output);
  }
  
  // required uint64 upload_bandwidth = 5;
  if (has_upload_bandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->upload_bandwidth(), output);
  }
  
  // required uint64 download_bandwidth = 6;
  if (has_download_bandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->download_bandwidth(), output);
  }
  
  // required uint64 upload = 7;
  if (has_upload()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->upload(), output);
  }
  
  // required uint64 download = 8;
  if (has_download()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->download(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Info_PeerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 peer_ip = 1;
  if (has_peer_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->peer_ip(), target);
  }
  
  // required string peer_type = 2;
  if (has_peer_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peer_type().data(), this->peer_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->peer_type(), target);
  }
  
  // required uint32 complete_precent = 3;
  if (has_complete_precent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->complete_precent(), target);
  }
  
  // required uint32 alive_time = 4;
  if (has_alive_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->alive_time(), target);
  }
  
  // required uint64 upload_bandwidth = 5;
  if (has_upload_bandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->upload_bandwidth(), target);
  }
  
  // required uint64 download_bandwidth = 6;
  if (has_download_bandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->download_bandwidth(), target);
  }
  
  // required uint64 upload = 7;
  if (has_upload()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->upload(), target);
  }
  
  // required uint64 download = 8;
  if (has_download()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->download(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Info_PeerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 peer_ip = 1;
    if (has_peer_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->peer_ip());
    }
    
    // required string peer_type = 2;
    if (has_peer_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->peer_type());
    }
    
    // required uint32 complete_precent = 3;
    if (has_complete_precent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->complete_precent());
    }
    
    // required uint32 alive_time = 4;
    if (has_alive_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->alive_time());
    }
    
    // required uint64 upload_bandwidth = 5;
    if (has_upload_bandwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->upload_bandwidth());
    }
    
    // required uint64 download_bandwidth = 6;
    if (has_download_bandwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->download_bandwidth());
    }
    
    // required uint64 upload = 7;
    if (has_upload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->upload());
    }
    
    // required uint64 download = 8;
    if (has_download()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->download());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Info_PeerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Info_PeerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Info_PeerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Info_PeerInfo::MergeFrom(const Info_PeerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_peer_ip()) {
      set_peer_ip(from.peer_ip());
    }
    if (from.has_peer_type()) {
      set_peer_type(from.peer_type());
    }
    if (from.has_complete_precent()) {
      set_complete_precent(from.complete_precent());
    }
    if (from.has_alive_time()) {
      set_alive_time(from.alive_time());
    }
    if (from.has_upload_bandwidth()) {
      set_upload_bandwidth(from.upload_bandwidth());
    }
    if (from.has_download_bandwidth()) {
      set_download_bandwidth(from.download_bandwidth());
    }
    if (from.has_upload()) {
      set_upload(from.upload());
    }
    if (from.has_download()) {
      set_download(from.download());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Info_PeerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Info_PeerInfo::CopyFrom(const Info_PeerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Info_PeerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void Info_PeerInfo::Swap(Info_PeerInfo* other) {
  if (other != this) {
    std::swap(peer_ip_, other->peer_ip_);
    std::swap(peer_type_, other->peer_type_);
    std::swap(complete_precent_, other->complete_precent_);
    std::swap(alive_time_, other->alive_time_);
    std::swap(upload_bandwidth_, other->upload_bandwidth_);
    std::swap(download_bandwidth_, other->download_bandwidth_);
    std::swap(upload_, other->upload_);
    std::swap(download_, other->download_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Info_PeerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Info_PeerInfo_descriptor_;
  metadata.reflection = Info_PeerInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Info_SystemInfo_CpuInfo::kCpuNameFieldNumber;
const int Info_SystemInfo_CpuInfo::kCpuUsageFieldNumber;
#endif  // !_MSC_VER

Info_SystemInfo_CpuInfo::Info_SystemInfo_CpuInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Info_SystemInfo_CpuInfo::InitAsDefaultInstance() {
}

Info_SystemInfo_CpuInfo::Info_SystemInfo_CpuInfo(const Info_SystemInfo_CpuInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Info_SystemInfo_CpuInfo::SharedCtor() {
  _cached_size_ = 0;
  cpu_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cpu_usage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Info_SystemInfo_CpuInfo::~Info_SystemInfo_CpuInfo() {
  SharedDtor();
}

void Info_SystemInfo_CpuInfo::SharedDtor() {
  if (cpu_name_ != &::google::protobuf::internal::kEmptyString) {
    delete cpu_name_;
  }
  if (this != default_instance_) {
  }
}

void Info_SystemInfo_CpuInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Info_SystemInfo_CpuInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Info_SystemInfo_CpuInfo_descriptor_;
}

const Info_SystemInfo_CpuInfo& Info_SystemInfo_CpuInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2eproto();  return *default_instance_;
}

Info_SystemInfo_CpuInfo* Info_SystemInfo_CpuInfo::default_instance_ = NULL;

Info_SystemInfo_CpuInfo* Info_SystemInfo_CpuInfo::New() const {
  return new Info_SystemInfo_CpuInfo;
}

void Info_SystemInfo_CpuInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cpu_name()) {
      if (cpu_name_ != &::google::protobuf::internal::kEmptyString) {
        cpu_name_->clear();
      }
    }
    cpu_usage_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Info_SystemInfo_CpuInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cpu_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cpu_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cpu_name().data(), this->cpu_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cpu_usage;
        break;
      }
      
      // required uint32 cpu_usage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpu_usage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_usage_)));
          set_has_cpu_usage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Info_SystemInfo_CpuInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string cpu_name = 1;
  if (has_cpu_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cpu_name().data(), this->cpu_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cpu_name(), output);
  }
  
  // required uint32 cpu_usage = 2;
  if (has_cpu_usage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cpu_usage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Info_SystemInfo_CpuInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string cpu_name = 1;
  if (has_cpu_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cpu_name().data(), this->cpu_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cpu_name(), target);
  }
  
  // required uint32 cpu_usage = 2;
  if (has_cpu_usage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cpu_usage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Info_SystemInfo_CpuInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cpu_name = 1;
    if (has_cpu_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cpu_name());
    }
    
    // required uint32 cpu_usage = 2;
    if (has_cpu_usage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu_usage());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Info_SystemInfo_CpuInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Info_SystemInfo_CpuInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Info_SystemInfo_CpuInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Info_SystemInfo_CpuInfo::MergeFrom(const Info_SystemInfo_CpuInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cpu_name()) {
      set_cpu_name(from.cpu_name());
    }
    if (from.has_cpu_usage()) {
      set_cpu_usage(from.cpu_usage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Info_SystemInfo_CpuInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Info_SystemInfo_CpuInfo::CopyFrom(const Info_SystemInfo_CpuInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Info_SystemInfo_CpuInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Info_SystemInfo_CpuInfo::Swap(Info_SystemInfo_CpuInfo* other) {
  if (other != this) {
    std::swap(cpu_name_, other->cpu_name_);
    std::swap(cpu_usage_, other->cpu_usage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Info_SystemInfo_CpuInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Info_SystemInfo_CpuInfo_descriptor_;
  metadata.reflection = Info_SystemInfo_CpuInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Info_SystemInfo_DiskInfo::kDiskNameFieldNumber;
const int Info_SystemInfo_DiskInfo::kTotalSizeFieldNumber;
const int Info_SystemInfo_DiskInfo::kUsageFieldNumber;
#endif  // !_MSC_VER

Info_SystemInfo_DiskInfo::Info_SystemInfo_DiskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Info_SystemInfo_DiskInfo::InitAsDefaultInstance() {
}

Info_SystemInfo_DiskInfo::Info_SystemInfo_DiskInfo(const Info_SystemInfo_DiskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Info_SystemInfo_DiskInfo::SharedCtor() {
  _cached_size_ = 0;
  disk_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  total_size_ = GOOGLE_ULONGLONG(0);
  usage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Info_SystemInfo_DiskInfo::~Info_SystemInfo_DiskInfo() {
  SharedDtor();
}

void Info_SystemInfo_DiskInfo::SharedDtor() {
  if (disk_name_ != &::google::protobuf::internal::kEmptyString) {
    delete disk_name_;
  }
  if (this != default_instance_) {
  }
}

void Info_SystemInfo_DiskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Info_SystemInfo_DiskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Info_SystemInfo_DiskInfo_descriptor_;
}

const Info_SystemInfo_DiskInfo& Info_SystemInfo_DiskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2eproto();  return *default_instance_;
}

Info_SystemInfo_DiskInfo* Info_SystemInfo_DiskInfo::default_instance_ = NULL;

Info_SystemInfo_DiskInfo* Info_SystemInfo_DiskInfo::New() const {
  return new Info_SystemInfo_DiskInfo;
}

void Info_SystemInfo_DiskInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_disk_name()) {
      if (disk_name_ != &::google::protobuf::internal::kEmptyString) {
        disk_name_->clear();
      }
    }
    total_size_ = GOOGLE_ULONGLONG(0);
    usage_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Info_SystemInfo_DiskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string disk_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_disk_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->disk_name().data(), this->disk_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_size;
        break;
      }
      
      // required uint64 total_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_size_)));
          set_has_total_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usage;
        break;
      }
      
      // required uint32 usage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usage_)));
          set_has_usage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Info_SystemInfo_DiskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string disk_name = 1;
  if (has_disk_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disk_name().data(), this->disk_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->disk_name(), output);
  }
  
  // required uint64 total_size = 2;
  if (has_total_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->total_size(), output);
  }
  
  // required uint32 usage = 3;
  if (has_usage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->usage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Info_SystemInfo_DiskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string disk_name = 1;
  if (has_disk_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disk_name().data(), this->disk_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->disk_name(), target);
  }
  
  // required uint64 total_size = 2;
  if (has_total_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->total_size(), target);
  }
  
  // required uint32 usage = 3;
  if (has_usage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->usage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Info_SystemInfo_DiskInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string disk_name = 1;
    if (has_disk_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->disk_name());
    }
    
    // required uint64 total_size = 2;
    if (has_total_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_size());
    }
    
    // required uint32 usage = 3;
    if (has_usage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usage());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Info_SystemInfo_DiskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Info_SystemInfo_DiskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Info_SystemInfo_DiskInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Info_SystemInfo_DiskInfo::MergeFrom(const Info_SystemInfo_DiskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_disk_name()) {
      set_disk_name(from.disk_name());
    }
    if (from.has_total_size()) {
      set_total_size(from.total_size());
    }
    if (from.has_usage()) {
      set_usage(from.usage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Info_SystemInfo_DiskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Info_SystemInfo_DiskInfo::CopyFrom(const Info_SystemInfo_DiskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Info_SystemInfo_DiskInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void Info_SystemInfo_DiskInfo::Swap(Info_SystemInfo_DiskInfo* other) {
  if (other != this) {
    std::swap(disk_name_, other->disk_name_);
    std::swap(total_size_, other->total_size_);
    std::swap(usage_, other->usage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Info_SystemInfo_DiskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Info_SystemInfo_DiskInfo_descriptor_;
  metadata.reflection = Info_SystemInfo_DiskInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Info_SystemInfo_NetInfo::kNetNameFieldNumber;
const int Info_SystemInfo_NetInfo::kInSizeFieldNumber;
const int Info_SystemInfo_NetInfo::kOutSizeFieldNumber;
#endif  // !_MSC_VER

Info_SystemInfo_NetInfo::Info_SystemInfo_NetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Info_SystemInfo_NetInfo::InitAsDefaultInstance() {
}

Info_SystemInfo_NetInfo::Info_SystemInfo_NetInfo(const Info_SystemInfo_NetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Info_SystemInfo_NetInfo::SharedCtor() {
  _cached_size_ = 0;
  net_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  in_size_ = GOOGLE_ULONGLONG(0);
  out_size_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Info_SystemInfo_NetInfo::~Info_SystemInfo_NetInfo() {
  SharedDtor();
}

void Info_SystemInfo_NetInfo::SharedDtor() {
  if (net_name_ != &::google::protobuf::internal::kEmptyString) {
    delete net_name_;
  }
  if (this != default_instance_) {
  }
}

void Info_SystemInfo_NetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Info_SystemInfo_NetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Info_SystemInfo_NetInfo_descriptor_;
}

const Info_SystemInfo_NetInfo& Info_SystemInfo_NetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2eproto();  return *default_instance_;
}

Info_SystemInfo_NetInfo* Info_SystemInfo_NetInfo::default_instance_ = NULL;

Info_SystemInfo_NetInfo* Info_SystemInfo_NetInfo::New() const {
  return new Info_SystemInfo_NetInfo;
}

void Info_SystemInfo_NetInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_net_name()) {
      if (net_name_ != &::google::protobuf::internal::kEmptyString) {
        net_name_->clear();
      }
    }
    in_size_ = GOOGLE_ULONGLONG(0);
    out_size_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Info_SystemInfo_NetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string net_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_net_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->net_name().data(), this->net_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_in_size;
        break;
      }
      
      // required uint64 in_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &in_size_)));
          set_has_in_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_out_size;
        break;
      }
      
      // required uint64 out_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &out_size_)));
          set_has_out_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Info_SystemInfo_NetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string net_name = 1;
  if (has_net_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->net_name().data(), this->net_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->net_name(), output);
  }
  
  // required uint64 in_size = 2;
  if (has_in_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->in_size(), output);
  }
  
  // required uint64 out_size = 3;
  if (has_out_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->out_size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Info_SystemInfo_NetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string net_name = 1;
  if (has_net_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->net_name().data(), this->net_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->net_name(), target);
  }
  
  // required uint64 in_size = 2;
  if (has_in_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->in_size(), target);
  }
  
  // required uint64 out_size = 3;
  if (has_out_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->out_size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Info_SystemInfo_NetInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string net_name = 1;
    if (has_net_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->net_name());
    }
    
    // required uint64 in_size = 2;
    if (has_in_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->in_size());
    }
    
    // required uint64 out_size = 3;
    if (has_out_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->out_size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Info_SystemInfo_NetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Info_SystemInfo_NetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Info_SystemInfo_NetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Info_SystemInfo_NetInfo::MergeFrom(const Info_SystemInfo_NetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_net_name()) {
      set_net_name(from.net_name());
    }
    if (from.has_in_size()) {
      set_in_size(from.in_size());
    }
    if (from.has_out_size()) {
      set_out_size(from.out_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Info_SystemInfo_NetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Info_SystemInfo_NetInfo::CopyFrom(const Info_SystemInfo_NetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Info_SystemInfo_NetInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void Info_SystemInfo_NetInfo::Swap(Info_SystemInfo_NetInfo* other) {
  if (other != this) {
    std::swap(net_name_, other->net_name_);
    std::swap(in_size_, other->in_size_);
    std::swap(out_size_, other->out_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Info_SystemInfo_NetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Info_SystemInfo_NetInfo_descriptor_;
  metadata.reflection = Info_SystemInfo_NetInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Info_SystemInfo::kCpuInfoFieldNumber;
const int Info_SystemInfo::kMemTotalSizeFieldNumber;
const int Info_SystemInfo::kMemUsageFieldNumber;
const int Info_SystemInfo::kDiskInfoFieldNumber;
const int Info_SystemInfo::kNetInfoFieldNumber;
#endif  // !_MSC_VER

Info_SystemInfo::Info_SystemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Info_SystemInfo::InitAsDefaultInstance() {
}

Info_SystemInfo::Info_SystemInfo(const Info_SystemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Info_SystemInfo::SharedCtor() {
  _cached_size_ = 0;
  mem_total_size_ = GOOGLE_ULONGLONG(0);
  mem_usage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Info_SystemInfo::~Info_SystemInfo() {
  SharedDtor();
}

void Info_SystemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Info_SystemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Info_SystemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Info_SystemInfo_descriptor_;
}

const Info_SystemInfo& Info_SystemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2eproto();  return *default_instance_;
}

Info_SystemInfo* Info_SystemInfo::default_instance_ = NULL;

Info_SystemInfo* Info_SystemInfo::New() const {
  return new Info_SystemInfo;
}

void Info_SystemInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    mem_total_size_ = GOOGLE_ULONGLONG(0);
    mem_usage_ = 0u;
  }
  cpu_info_.Clear();
  disk_info_.Clear();
  net_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Info_SystemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_type.Info.SystemInfo.CpuInfo cpu_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cpu_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cpu_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cpu_info;
        if (input->ExpectTag(16)) goto parse_mem_total_size;
        break;
      }
      
      // required uint64 mem_total_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem_total_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mem_total_size_)));
          set_has_mem_total_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mem_usage;
        break;
      }
      
      // required uint32 mem_usage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem_usage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mem_usage_)));
          set_has_mem_usage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_disk_info;
        break;
      }
      
      // repeated .proto_type.Info.SystemInfo.DiskInfo disk_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disk_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_disk_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_disk_info;
        if (input->ExpectTag(42)) goto parse_net_info;
        break;
      }
      
      // repeated .proto_type.Info.SystemInfo.NetInfo net_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_net_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_net_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_net_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Info_SystemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_type.Info.SystemInfo.CpuInfo cpu_info = 1;
  for (int i = 0; i < this->cpu_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cpu_info(i), output);
  }
  
  // required uint64 mem_total_size = 2;
  if (has_mem_total_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mem_total_size(), output);
  }
  
  // required uint32 mem_usage = 3;
  if (has_mem_usage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mem_usage(), output);
  }
  
  // repeated .proto_type.Info.SystemInfo.DiskInfo disk_info = 4;
  for (int i = 0; i < this->disk_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->disk_info(i), output);
  }
  
  // repeated .proto_type.Info.SystemInfo.NetInfo net_info = 5;
  for (int i = 0; i < this->net_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->net_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Info_SystemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_type.Info.SystemInfo.CpuInfo cpu_info = 1;
  for (int i = 0; i < this->cpu_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cpu_info(i), target);
  }
  
  // required uint64 mem_total_size = 2;
  if (has_mem_total_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mem_total_size(), target);
  }
  
  // required uint32 mem_usage = 3;
  if (has_mem_usage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mem_usage(), target);
  }
  
  // repeated .proto_type.Info.SystemInfo.DiskInfo disk_info = 4;
  for (int i = 0; i < this->disk_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->disk_info(i), target);
  }
  
  // repeated .proto_type.Info.SystemInfo.NetInfo net_info = 5;
  for (int i = 0; i < this->net_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->net_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Info_SystemInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint64 mem_total_size = 2;
    if (has_mem_total_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mem_total_size());
    }
    
    // required uint32 mem_usage = 3;
    if (has_mem_usage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mem_usage());
    }
    
  }
  // repeated .proto_type.Info.SystemInfo.CpuInfo cpu_info = 1;
  total_size += 1 * this->cpu_info_size();
  for (int i = 0; i < this->cpu_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cpu_info(i));
  }
  
  // repeated .proto_type.Info.SystemInfo.DiskInfo disk_info = 4;
  total_size += 1 * this->disk_info_size();
  for (int i = 0; i < this->disk_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->disk_info(i));
  }
  
  // repeated .proto_type.Info.SystemInfo.NetInfo net_info = 5;
  total_size += 1 * this->net_info_size();
  for (int i = 0; i < this->net_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->net_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Info_SystemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Info_SystemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Info_SystemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Info_SystemInfo::MergeFrom(const Info_SystemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  cpu_info_.MergeFrom(from.cpu_info_);
  disk_info_.MergeFrom(from.disk_info_);
  net_info_.MergeFrom(from.net_info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_mem_total_size()) {
      set_mem_total_size(from.mem_total_size());
    }
    if (from.has_mem_usage()) {
      set_mem_usage(from.mem_usage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Info_SystemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Info_SystemInfo::CopyFrom(const Info_SystemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Info_SystemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  for (int i = 0; i < cpu_info_size(); i++) {
    if (!this->cpu_info(i).IsInitialized()) return false;
  }
  for (int i = 0; i < disk_info_size(); i++) {
    if (!this->disk_info(i).IsInitialized()) return false;
  }
  for (int i = 0; i < net_info_size(); i++) {
    if (!this->net_info(i).IsInitialized()) return false;
  }
  return true;
}

void Info_SystemInfo::Swap(Info_SystemInfo* other) {
  if (other != this) {
    cpu_info_.Swap(&other->cpu_info_);
    std::swap(mem_total_size_, other->mem_total_size_);
    std::swap(mem_usage_, other->mem_usage_);
    disk_info_.Swap(&other->disk_info_);
    net_info_.Swap(&other->net_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Info_SystemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Info_SystemInfo_descriptor_;
  metadata.reflection = Info_SystemInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Info_CacheStatusInfo::kReadsFieldNumber;
const int Info_CacheStatusInfo::kWritesFieldNumber;
const int Info_CacheStatusInfo::kBlocksReadFieldNumber;
const int Info_CacheStatusInfo::kBlocksWriteFieldNumber;
const int Info_CacheStatusInfo::kBlocksReadHitFieldNumber;
const int Info_CacheStatusInfo::kWriteToDiskDirectlyFieldNumber;
const int Info_CacheStatusInfo::kReadCacheSizeFieldNumber;
const int Info_CacheStatusInfo::kFinishedWriteCacheSizeFieldNumber;
const int Info_CacheStatusInfo::kUnfinishedWriteCacheSizeFieldNumber;
#endif  // !_MSC_VER

Info_CacheStatusInfo::Info_CacheStatusInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Info_CacheStatusInfo::InitAsDefaultInstance() {
}

Info_CacheStatusInfo::Info_CacheStatusInfo(const Info_CacheStatusInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Info_CacheStatusInfo::SharedCtor() {
  _cached_size_ = 0;
  reads_ = GOOGLE_ULONGLONG(0);
  writes_ = GOOGLE_ULONGLONG(0);
  blocks_read_ = GOOGLE_ULONGLONG(0);
  blocks_write_ = GOOGLE_ULONGLONG(0);
  blocks_read_hit_ = GOOGLE_ULONGLONG(0);
  write_to_disk_directly_ = GOOGLE_ULONGLONG(0);
  read_cache_size_ = GOOGLE_ULONGLONG(0);
  finished_write_cache_size_ = GOOGLE_ULONGLONG(0);
  unfinished_write_cache_size_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Info_CacheStatusInfo::~Info_CacheStatusInfo() {
  SharedDtor();
}

void Info_CacheStatusInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Info_CacheStatusInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Info_CacheStatusInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Info_CacheStatusInfo_descriptor_;
}

const Info_CacheStatusInfo& Info_CacheStatusInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2eproto();  return *default_instance_;
}

Info_CacheStatusInfo* Info_CacheStatusInfo::default_instance_ = NULL;

Info_CacheStatusInfo* Info_CacheStatusInfo::New() const {
  return new Info_CacheStatusInfo;
}

void Info_CacheStatusInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reads_ = GOOGLE_ULONGLONG(0);
    writes_ = GOOGLE_ULONGLONG(0);
    blocks_read_ = GOOGLE_ULONGLONG(0);
    blocks_write_ = GOOGLE_ULONGLONG(0);
    blocks_read_hit_ = GOOGLE_ULONGLONG(0);
    write_to_disk_directly_ = GOOGLE_ULONGLONG(0);
    read_cache_size_ = GOOGLE_ULONGLONG(0);
    finished_write_cache_size_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    unfinished_write_cache_size_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Info_CacheStatusInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 reads = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reads_)));
          set_has_reads();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_writes;
        break;
      }
      
      // required uint64 writes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_writes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &writes_)));
          set_has_writes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_blocks_read;
        break;
      }
      
      // required uint64 blocks_read = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blocks_read:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &blocks_read_)));
          set_has_blocks_read();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_blocks_write;
        break;
      }
      
      // required uint64 blocks_write = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blocks_write:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &blocks_write_)));
          set_has_blocks_write();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_blocks_read_hit;
        break;
      }
      
      // required uint64 blocks_read_hit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blocks_read_hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &blocks_read_hit_)));
          set_has_blocks_read_hit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_write_to_disk_directly;
        break;
      }
      
      // required uint64 write_to_disk_directly = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_write_to_disk_directly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &write_to_disk_directly_)));
          set_has_write_to_disk_directly();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_read_cache_size;
        break;
      }
      
      // required uint64 read_cache_size = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_read_cache_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &read_cache_size_)));
          set_has_read_cache_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_finished_write_cache_size;
        break;
      }
      
      // required uint64 finished_write_cache_size = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finished_write_cache_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &finished_write_cache_size_)));
          set_has_finished_write_cache_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_unfinished_write_cache_size;
        break;
      }
      
      // required uint64 unfinished_write_cache_size = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unfinished_write_cache_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unfinished_write_cache_size_)));
          set_has_unfinished_write_cache_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Info_CacheStatusInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 reads = 1;
  if (has_reads()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->reads(), output);
  }
  
  // required uint64 writes = 2;
  if (has_writes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->writes(), output);
  }
  
  // required uint64 blocks_read = 3;
  if (has_blocks_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->blocks_read(), output);
  }
  
  // required uint64 blocks_write = 4;
  if (has_blocks_write()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->blocks_write(), output);
  }
  
  // required uint64 blocks_read_hit = 5;
  if (has_blocks_read_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->blocks_read_hit(), output);
  }
  
  // required uint64 write_to_disk_directly = 6;
  if (has_write_to_disk_directly()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->write_to_disk_directly(), output);
  }
  
  // required uint64 read_cache_size = 7;
  if (has_read_cache_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->read_cache_size(), output);
  }
  
  // required uint64 finished_write_cache_size = 8;
  if (has_finished_write_cache_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->finished_write_cache_size(), output);
  }
  
  // required uint64 unfinished_write_cache_size = 9;
  if (has_unfinished_write_cache_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->unfinished_write_cache_size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Info_CacheStatusInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 reads = 1;
  if (has_reads()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->reads(), target);
  }
  
  // required uint64 writes = 2;
  if (has_writes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->writes(), target);
  }
  
  // required uint64 blocks_read = 3;
  if (has_blocks_read()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->blocks_read(), target);
  }
  
  // required uint64 blocks_write = 4;
  if (has_blocks_write()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->blocks_write(), target);
  }
  
  // required uint64 blocks_read_hit = 5;
  if (has_blocks_read_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->blocks_read_hit(), target);
  }
  
  // required uint64 write_to_disk_directly = 6;
  if (has_write_to_disk_directly()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->write_to_disk_directly(), target);
  }
  
  // required uint64 read_cache_size = 7;
  if (has_read_cache_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->read_cache_size(), target);
  }
  
  // required uint64 finished_write_cache_size = 8;
  if (has_finished_write_cache_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->finished_write_cache_size(), target);
  }
  
  // required uint64 unfinished_write_cache_size = 9;
  if (has_unfinished_write_cache_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->unfinished_write_cache_size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Info_CacheStatusInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 reads = 1;
    if (has_reads()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reads());
    }
    
    // required uint64 writes = 2;
    if (has_writes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->writes());
    }
    
    // required uint64 blocks_read = 3;
    if (has_blocks_read()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->blocks_read());
    }
    
    // required uint64 blocks_write = 4;
    if (has_blocks_write()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->blocks_write());
    }
    
    // required uint64 blocks_read_hit = 5;
    if (has_blocks_read_hit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->blocks_read_hit());
    }
    
    // required uint64 write_to_disk_directly = 6;
    if (has_write_to_disk_directly()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->write_to_disk_directly());
    }
    
    // required uint64 read_cache_size = 7;
    if (has_read_cache_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->read_cache_size());
    }
    
    // required uint64 finished_write_cache_size = 8;
    if (has_finished_write_cache_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->finished_write_cache_size());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint64 unfinished_write_cache_size = 9;
    if (has_unfinished_write_cache_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->unfinished_write_cache_size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Info_CacheStatusInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Info_CacheStatusInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Info_CacheStatusInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Info_CacheStatusInfo::MergeFrom(const Info_CacheStatusInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reads()) {
      set_reads(from.reads());
    }
    if (from.has_writes()) {
      set_writes(from.writes());
    }
    if (from.has_blocks_read()) {
      set_blocks_read(from.blocks_read());
    }
    if (from.has_blocks_write()) {
      set_blocks_write(from.blocks_write());
    }
    if (from.has_blocks_read_hit()) {
      set_blocks_read_hit(from.blocks_read_hit());
    }
    if (from.has_write_to_disk_directly()) {
      set_write_to_disk_directly(from.write_to_disk_directly());
    }
    if (from.has_read_cache_size()) {
      set_read_cache_size(from.read_cache_size());
    }
    if (from.has_finished_write_cache_size()) {
      set_finished_write_cache_size(from.finished_write_cache_size());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_unfinished_write_cache_size()) {
      set_unfinished_write_cache_size(from.unfinished_write_cache_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Info_CacheStatusInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Info_CacheStatusInfo::CopyFrom(const Info_CacheStatusInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Info_CacheStatusInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  
  return true;
}

void Info_CacheStatusInfo::Swap(Info_CacheStatusInfo* other) {
  if (other != this) {
    std::swap(reads_, other->reads_);
    std::swap(writes_, other->writes_);
    std::swap(blocks_read_, other->blocks_read_);
    std::swap(blocks_write_, other->blocks_write_);
    std::swap(blocks_read_hit_, other->blocks_read_hit_);
    std::swap(write_to_disk_directly_, other->write_to_disk_directly_);
    std::swap(read_cache_size_, other->read_cache_size_);
    std::swap(finished_write_cache_size_, other->finished_write_cache_size_);
    std::swap(unfinished_write_cache_size_, other->unfinished_write_cache_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Info_CacheStatusInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Info_CacheStatusInfo_descriptor_;
  metadata.reflection = Info_CacheStatusInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Info::kSessionInfoFieldNumber;
const int Info::kTorrentInfoFieldNumber;
const int Info::kPeerInfoFieldNumber;
const int Info::kSystemInfoFieldNumber;
const int Info::kCacheStatusInfoFieldNumber;
#endif  // !_MSC_VER

Info::Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Info::InitAsDefaultInstance() {
  system_info_ = const_cast< ::proto_type::Info_SystemInfo*>(&::proto_type::Info_SystemInfo::default_instance());
  cache_status_info_ = const_cast< ::proto_type::Info_CacheStatusInfo*>(&::proto_type::Info_CacheStatusInfo::default_instance());
}

Info::Info(const Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Info::SharedCtor() {
  _cached_size_ = 0;
  system_info_ = NULL;
  cache_status_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Info::~Info() {
  SharedDtor();
}

void Info::SharedDtor() {
  if (this != default_instance_) {
    delete system_info_;
    delete cache_status_info_;
  }
}

void Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Info_descriptor_;
}

const Info& Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2eproto();  return *default_instance_;
}

Info* Info::default_instance_ = NULL;

Info* Info::New() const {
  return new Info;
}

void Info::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (has_system_info()) {
      if (system_info_ != NULL) system_info_->::proto_type::Info_SystemInfo::Clear();
    }
    if (has_cache_status_info()) {
      if (cache_status_info_ != NULL) cache_status_info_->::proto_type::Info_CacheStatusInfo::Clear();
    }
  }
  session_info_.Clear();
  torrent_info_.Clear();
  peer_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_type.Info.SessionInfo session_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_session_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_session_info;
        if (input->ExpectTag(18)) goto parse_torrent_info;
        break;
      }
      
      // repeated .proto_type.Info.TorrentInfo torrent_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_torrent_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_torrent_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_torrent_info;
        if (input->ExpectTag(26)) goto parse_peer_info;
        break;
      }
      
      // repeated .proto_type.Info.PeerInfo peer_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peer_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_peer_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_peer_info;
        if (input->ExpectTag(34)) goto parse_system_info;
        break;
      }
      
      // optional .proto_type.Info.SystemInfo system_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_system_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_system_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cache_status_info;
        break;
      }
      
      // optional .proto_type.Info.CacheStatusInfo cache_status_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cache_status_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cache_status_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_type.Info.SessionInfo session_info = 1;
  for (int i = 0; i < this->session_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session_info(i), output);
  }
  
  // repeated .proto_type.Info.TorrentInfo torrent_info = 2;
  for (int i = 0; i < this->torrent_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->torrent_info(i), output);
  }
  
  // repeated .proto_type.Info.PeerInfo peer_info = 3;
  for (int i = 0; i < this->peer_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->peer_info(i), output);
  }
  
  // optional .proto_type.Info.SystemInfo system_info = 4;
  if (has_system_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->system_info(), output);
  }
  
  // optional .proto_type.Info.CacheStatusInfo cache_status_info = 5;
  if (has_cache_status_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cache_status_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_type.Info.SessionInfo session_info = 1;
  for (int i = 0; i < this->session_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session_info(i), target);
  }
  
  // repeated .proto_type.Info.TorrentInfo torrent_info = 2;
  for (int i = 0; i < this->torrent_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->torrent_info(i), target);
  }
  
  // repeated .proto_type.Info.PeerInfo peer_info = 3;
  for (int i = 0; i < this->peer_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->peer_info(i), target);
  }
  
  // optional .proto_type.Info.SystemInfo system_info = 4;
  if (has_system_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->system_info(), target);
  }
  
  // optional .proto_type.Info.CacheStatusInfo cache_status_info = 5;
  if (has_cache_status_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->cache_status_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional .proto_type.Info.SystemInfo system_info = 4;
    if (has_system_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->system_info());
    }
    
    // optional .proto_type.Info.CacheStatusInfo cache_status_info = 5;
    if (has_cache_status_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cache_status_info());
    }
    
  }
  // repeated .proto_type.Info.SessionInfo session_info = 1;
  total_size += 1 * this->session_info_size();
  for (int i = 0; i < this->session_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->session_info(i));
  }
  
  // repeated .proto_type.Info.TorrentInfo torrent_info = 2;
  total_size += 1 * this->torrent_info_size();
  for (int i = 0; i < this->torrent_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->torrent_info(i));
  }
  
  // repeated .proto_type.Info.PeerInfo peer_info = 3;
  total_size += 1 * this->peer_info_size();
  for (int i = 0; i < this->peer_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->peer_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Info::MergeFrom(const Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  session_info_.MergeFrom(from.session_info_);
  torrent_info_.MergeFrom(from.torrent_info_);
  peer_info_.MergeFrom(from.peer_info_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_system_info()) {
      mutable_system_info()->::proto_type::Info_SystemInfo::MergeFrom(from.system_info());
    }
    if (from.has_cache_status_info()) {
      mutable_cache_status_info()->::proto_type::Info_CacheStatusInfo::MergeFrom(from.cache_status_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Info::CopyFrom(const Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Info::IsInitialized() const {
  
  for (int i = 0; i < session_info_size(); i++) {
    if (!this->session_info(i).IsInitialized()) return false;
  }
  for (int i = 0; i < torrent_info_size(); i++) {
    if (!this->torrent_info(i).IsInitialized()) return false;
  }
  for (int i = 0; i < peer_info_size(); i++) {
    if (!this->peer_info(i).IsInitialized()) return false;
  }
  if (has_system_info()) {
    if (!this->system_info().IsInitialized()) return false;
  }
  if (has_cache_status_info()) {
    if (!this->cache_status_info().IsInitialized()) return false;
  }
  return true;
}

void Info::Swap(Info* other) {
  if (other != this) {
    session_info_.Swap(&other->session_info_);
    torrent_info_.Swap(&other->torrent_info_);
    peer_info_.Swap(&other->peer_info_);
    std::swap(system_info_, other->system_info_);
    std::swap(cache_status_info_, other->cache_status_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Info_descriptor_;
  metadata.reflection = Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Command::kCommandFieldNumber;
#endif  // !_MSC_VER

Command::Command()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Command::InitAsDefaultInstance() {
}

Command::Command(const Command& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Command::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Command::~Command() {
  SharedDtor();
}

void Command::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_descriptor_;
}

const Command& Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2eproto();  return *default_instance_;
}

Command* Command::default_instance_ = NULL;

Command* Command::New() const {
  return new Command;
}

void Command::Clear() {
  command_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->command(0).data(), this->command(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_command;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string command = 1;
  for (int i = 0; i < this->command_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->command(i).data(), this->command(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->command(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Command::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string command = 1;
  for (int i = 0; i < this->command_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command(i).data(), this->command(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->command(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Command::ByteSize() const {
  int total_size = 0;
  
  // repeated string command = 1;
  total_size += 1 * this->command_size();
  for (int i = 0; i < this->command_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->command(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Command* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Command*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
  GOOGLE_CHECK_NE(&from, this);
  command_.MergeFrom(from.command_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  
  return true;
}

void Command::Swap(Command* other) {
  if (other != this) {
    command_.Swap(&other->command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Command_descriptor_;
  metadata.reflection = Command_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_type

// @@protoc_insertion_point(global_scope)
