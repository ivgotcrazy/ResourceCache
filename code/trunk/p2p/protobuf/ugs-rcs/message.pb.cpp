// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace BroadCache {

namespace {

const ::google::protobuf::Descriptor* EndPointStruct_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EndPointStruct_reflection_ = NULL;
const ::google::protobuf::Descriptor* BtKeepAliveMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BtKeepAliveMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* BtReportResourceMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BtReportResourceMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* BtReportServiceAddressMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BtReportServiceAddressMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* BtRequestTrackerMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BtRequestTrackerMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* BtReplyTrackerMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BtReplyTrackerMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* BtRequestProxyMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BtRequestProxyMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* BtReplyProxyMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BtReplyProxyMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PpsKeepAliveMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PpsKeepAliveMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PpsReportResourceMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PpsReportResourceMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PpsReportServiceAddressMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PpsReportServiceAddressMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PpsRequestTrackerMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PpsRequestTrackerMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PpsReplyTrackerMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PpsReplyTrackerMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TrackerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RcsType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  EndPointStruct_descriptor_ = file->message_type(0);
  static const int EndPointStruct_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndPointStruct, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndPointStruct, port_),
  };
  EndPointStruct_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EndPointStruct_descriptor_,
      EndPointStruct::default_instance_,
      EndPointStruct_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndPointStruct, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndPointStruct, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EndPointStruct));
  BtKeepAliveMsg_descriptor_ = file->message_type(1);
  static const int BtKeepAliveMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtKeepAliveMsg, domain_),
  };
  BtKeepAliveMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BtKeepAliveMsg_descriptor_,
      BtKeepAliveMsg::default_instance_,
      BtKeepAliveMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtKeepAliveMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtKeepAliveMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BtKeepAliveMsg));
  BtReportResourceMsg_descriptor_ = file->message_type(2);
  static const int BtReportResourceMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtReportResourceMsg, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtReportResourceMsg, info_hash_),
  };
  BtReportResourceMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BtReportResourceMsg_descriptor_,
      BtReportResourceMsg::default_instance_,
      BtReportResourceMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtReportResourceMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtReportResourceMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BtReportResourceMsg));
  BtReportServiceAddressMsg_descriptor_ = file->message_type(3);
  static const int BtReportServiceAddressMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtReportServiceAddressMsg, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtReportServiceAddressMsg, rcs_),
  };
  BtReportServiceAddressMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BtReportServiceAddressMsg_descriptor_,
      BtReportServiceAddressMsg::default_instance_,
      BtReportServiceAddressMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtReportServiceAddressMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtReportServiceAddressMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BtReportServiceAddressMsg));
  BtRequestTrackerMsg_descriptor_ = file->message_type(4);
  static const int BtRequestTrackerMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtRequestTrackerMsg, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtRequestTrackerMsg, tracker_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtRequestTrackerMsg, info_hash_),
  };
  BtRequestTrackerMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BtRequestTrackerMsg_descriptor_,
      BtRequestTrackerMsg::default_instance_,
      BtRequestTrackerMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtRequestTrackerMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtRequestTrackerMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BtRequestTrackerMsg));
  BtReplyTrackerMsg_descriptor_ = file->message_type(5);
  static const int BtReplyTrackerMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtReplyTrackerMsg, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtReplyTrackerMsg, tracker_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtReplyTrackerMsg, info_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtReplyTrackerMsg, tracker_),
  };
  BtReplyTrackerMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BtReplyTrackerMsg_descriptor_,
      BtReplyTrackerMsg::default_instance_,
      BtReplyTrackerMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtReplyTrackerMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtReplyTrackerMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BtReplyTrackerMsg));
  BtRequestProxyMsg_descriptor_ = file->message_type(6);
  static const int BtRequestProxyMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtRequestProxyMsg, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtRequestProxyMsg, rcs_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtRequestProxyMsg, info_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtRequestProxyMsg, num_want_),
  };
  BtRequestProxyMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BtRequestProxyMsg_descriptor_,
      BtRequestProxyMsg::default_instance_,
      BtRequestProxyMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtRequestProxyMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtRequestProxyMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BtRequestProxyMsg));
  BtReplyProxyMsg_descriptor_ = file->message_type(7);
  static const int BtReplyProxyMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtReplyProxyMsg, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtReplyProxyMsg, rcs_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtReplyProxyMsg, info_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtReplyProxyMsg, proxy_),
  };
  BtReplyProxyMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BtReplyProxyMsg_descriptor_,
      BtReplyProxyMsg::default_instance_,
      BtReplyProxyMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtReplyProxyMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BtReplyProxyMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BtReplyProxyMsg));
  PpsKeepAliveMsg_descriptor_ = file->message_type(8);
  static const int PpsKeepAliveMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PpsKeepAliveMsg, domain_),
  };
  PpsKeepAliveMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PpsKeepAliveMsg_descriptor_,
      PpsKeepAliveMsg::default_instance_,
      PpsKeepAliveMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PpsKeepAliveMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PpsKeepAliveMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PpsKeepAliveMsg));
  PpsReportResourceMsg_descriptor_ = file->message_type(9);
  static const int PpsReportResourceMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PpsReportResourceMsg, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PpsReportResourceMsg, info_hash_),
  };
  PpsReportResourceMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PpsReportResourceMsg_descriptor_,
      PpsReportResourceMsg::default_instance_,
      PpsReportResourceMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PpsReportResourceMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PpsReportResourceMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PpsReportResourceMsg));
  PpsReportServiceAddressMsg_descriptor_ = file->message_type(10);
  static const int PpsReportServiceAddressMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PpsReportServiceAddressMsg, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PpsReportServiceAddressMsg, rcs_),
  };
  PpsReportServiceAddressMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PpsReportServiceAddressMsg_descriptor_,
      PpsReportServiceAddressMsg::default_instance_,
      PpsReportServiceAddressMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PpsReportServiceAddressMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PpsReportServiceAddressMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PpsReportServiceAddressMsg));
  PpsRequestTrackerMsg_descriptor_ = file->message_type(11);
  static const int PpsRequestTrackerMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PpsRequestTrackerMsg, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PpsRequestTrackerMsg, tracker_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PpsRequestTrackerMsg, info_hash_),
  };
  PpsRequestTrackerMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PpsRequestTrackerMsg_descriptor_,
      PpsRequestTrackerMsg::default_instance_,
      PpsRequestTrackerMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PpsRequestTrackerMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PpsRequestTrackerMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PpsRequestTrackerMsg));
  PpsReplyTrackerMsg_descriptor_ = file->message_type(12);
  static const int PpsReplyTrackerMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PpsReplyTrackerMsg, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PpsReplyTrackerMsg, tracker_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PpsReplyTrackerMsg, info_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PpsReplyTrackerMsg, tracker_),
  };
  PpsReplyTrackerMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PpsReplyTrackerMsg_descriptor_,
      PpsReplyTrackerMsg::default_instance_,
      PpsReplyTrackerMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PpsReplyTrackerMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PpsReplyTrackerMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PpsReplyTrackerMsg));
  TrackerType_descriptor_ = file->enum_type(0);
  RcsType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EndPointStruct_descriptor_, &EndPointStruct::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BtKeepAliveMsg_descriptor_, &BtKeepAliveMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BtReportResourceMsg_descriptor_, &BtReportResourceMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BtReportServiceAddressMsg_descriptor_, &BtReportServiceAddressMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BtRequestTrackerMsg_descriptor_, &BtRequestTrackerMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BtReplyTrackerMsg_descriptor_, &BtReplyTrackerMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BtRequestProxyMsg_descriptor_, &BtRequestProxyMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BtReplyProxyMsg_descriptor_, &BtReplyProxyMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PpsKeepAliveMsg_descriptor_, &PpsKeepAliveMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PpsReportResourceMsg_descriptor_, &PpsReportResourceMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PpsReportServiceAddressMsg_descriptor_, &PpsReportServiceAddressMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PpsRequestTrackerMsg_descriptor_, &PpsRequestTrackerMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PpsReplyTrackerMsg_descriptor_, &PpsReplyTrackerMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete EndPointStruct::default_instance_;
  delete EndPointStruct_reflection_;
  delete BtKeepAliveMsg::default_instance_;
  delete BtKeepAliveMsg_reflection_;
  delete BtReportResourceMsg::default_instance_;
  delete BtReportResourceMsg_reflection_;
  delete BtReportServiceAddressMsg::default_instance_;
  delete BtReportServiceAddressMsg_reflection_;
  delete BtRequestTrackerMsg::default_instance_;
  delete BtRequestTrackerMsg_reflection_;
  delete BtReplyTrackerMsg::default_instance_;
  delete BtReplyTrackerMsg_reflection_;
  delete BtRequestProxyMsg::default_instance_;
  delete BtRequestProxyMsg_reflection_;
  delete BtReplyProxyMsg::default_instance_;
  delete BtReplyProxyMsg_reflection_;
  delete PpsKeepAliveMsg::default_instance_;
  delete PpsKeepAliveMsg_reflection_;
  delete PpsReportResourceMsg::default_instance_;
  delete PpsReportResourceMsg_reflection_;
  delete PpsReportServiceAddressMsg::default_instance_;
  delete PpsReportServiceAddressMsg_reflection_;
  delete PpsRequestTrackerMsg::default_instance_;
  delete PpsRequestTrackerMsg_reflection_;
  delete PpsReplyTrackerMsg::default_instance_;
  delete PpsReplyTrackerMsg_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\022\nBroadCache\"*\n\016EndPointS"
    "truct\022\n\n\002ip\030\001 \001(\r\022\014\n\004port\030\002 \001(\r\" \n\016BtKee"
    "pAliveMsg\022\016\n\006domain\030\001 \001(\t\"8\n\023BtReportRes"
    "ourceMsg\022\016\n\006domain\030\001 \001(\t\022\021\n\tinfo_hash\030\002 "
    "\003(\014\"T\n\031BtReportServiceAddressMsg\022\016\n\006doma"
    "in\030\001 \001(\t\022\'\n\003rcs\030\002 \003(\0132\032.BroadCache.EndPo"
    "intStruct\"g\n\023BtRequestTrackerMsg\022\016\n\006doma"
    "in\030\001 \001(\t\022-\n\014tracker_type\030\002 \001(\0162\027.BroadCa"
    "che.TrackerType\022\021\n\tinfo_hash\030\003 \001(\014\"\222\001\n\021B"
    "tReplyTrackerMsg\022\016\n\006domain\030\001 \001(\t\022-\n\014trac"
    "ker_type\030\002 \001(\0162\027.BroadCache.TrackerType\022"
    "\021\n\tinfo_hash\030\003 \001(\014\022+\n\007tracker\030\004 \003(\0132\032.Br"
    "oadCache.EndPointStruct\"o\n\021BtRequestProx"
    "yMsg\022\016\n\006domain\030\001 \001(\t\022%\n\010rcs_type\030\002 \001(\0162\023"
    ".BroadCache.RcsType\022\021\n\tinfo_hash\030\003 \001(\014\022\020"
    "\n\010num_want\030\004 \001(\r\"\206\001\n\017BtReplyProxyMsg\022\016\n\006"
    "domain\030\001 \001(\t\022%\n\010rcs_type\030\002 \001(\0162\023.BroadCa"
    "che.RcsType\022\021\n\tinfo_hash\030\003 \001(\014\022)\n\005proxy\030"
    "\004 \003(\0132\032.BroadCache.EndPointStruct\"!\n\017Pps"
    "KeepAliveMsg\022\016\n\006domain\030\001 \001(\t\"9\n\024PpsRepor"
    "tResourceMsg\022\016\n\006domain\030\001 \001(\t\022\021\n\tinfo_has"
    "h\030\002 \003(\014\"U\n\032PpsReportServiceAddressMsg\022\016\n"
    "\006domain\030\001 \001(\t\022\'\n\003rcs\030\002 \003(\0132\032.BroadCache."
    "EndPointStruct\"h\n\024PpsRequestTrackerMsg\022\016"
    "\n\006domain\030\001 \001(\t\022-\n\014tracker_type\030\002 \001(\0162\027.B"
    "roadCache.TrackerType\022\021\n\tinfo_hash\030\003 \001(\014"
    "\"\223\001\n\022PpsReplyTrackerMsg\022\016\n\006domain\030\001 \001(\t\022"
    "-\n\014tracker_type\030\002 \001(\0162\027.BroadCache.Track"
    "erType\022\021\n\tinfo_hash\030\003 \001(\014\022+\n\007tracker\030\004 \003"
    "(\0132\032.BroadCache.EndPointStruct*0\n\013Tracke"
    "rType\022\020\n\014HTTP_TRACKER\020\000\022\017\n\013UDP_TRACKER\020\001"
    "*B\n\007RcsType\022\025\n\021CACHED_DATA_PROXY\020\000\022\017\n\013IN"
    "NER_PROXY\020\001\022\017\n\013OUTER_PROXY\020\002", 1308);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  EndPointStruct::default_instance_ = new EndPointStruct();
  BtKeepAliveMsg::default_instance_ = new BtKeepAliveMsg();
  BtReportResourceMsg::default_instance_ = new BtReportResourceMsg();
  BtReportServiceAddressMsg::default_instance_ = new BtReportServiceAddressMsg();
  BtRequestTrackerMsg::default_instance_ = new BtRequestTrackerMsg();
  BtReplyTrackerMsg::default_instance_ = new BtReplyTrackerMsg();
  BtRequestProxyMsg::default_instance_ = new BtRequestProxyMsg();
  BtReplyProxyMsg::default_instance_ = new BtReplyProxyMsg();
  PpsKeepAliveMsg::default_instance_ = new PpsKeepAliveMsg();
  PpsReportResourceMsg::default_instance_ = new PpsReportResourceMsg();
  PpsReportServiceAddressMsg::default_instance_ = new PpsReportServiceAddressMsg();
  PpsRequestTrackerMsg::default_instance_ = new PpsRequestTrackerMsg();
  PpsReplyTrackerMsg::default_instance_ = new PpsReplyTrackerMsg();
  EndPointStruct::default_instance_->InitAsDefaultInstance();
  BtKeepAliveMsg::default_instance_->InitAsDefaultInstance();
  BtReportResourceMsg::default_instance_->InitAsDefaultInstance();
  BtReportServiceAddressMsg::default_instance_->InitAsDefaultInstance();
  BtRequestTrackerMsg::default_instance_->InitAsDefaultInstance();
  BtReplyTrackerMsg::default_instance_->InitAsDefaultInstance();
  BtRequestProxyMsg::default_instance_->InitAsDefaultInstance();
  BtReplyProxyMsg::default_instance_->InitAsDefaultInstance();
  PpsKeepAliveMsg::default_instance_->InitAsDefaultInstance();
  PpsReportResourceMsg::default_instance_->InitAsDefaultInstance();
  PpsReportServiceAddressMsg::default_instance_->InitAsDefaultInstance();
  PpsRequestTrackerMsg::default_instance_->InitAsDefaultInstance();
  PpsReplyTrackerMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;

const ::google::protobuf::EnumDescriptor* TrackerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackerType_descriptor_;
}
bool TrackerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RcsType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RcsType_descriptor_;
}
bool RcsType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int EndPointStruct::kIpFieldNumber;
const int EndPointStruct::kPortFieldNumber;
#endif  // !_MSC_VER

EndPointStruct::EndPointStruct()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EndPointStruct::InitAsDefaultInstance() {
}

EndPointStruct::EndPointStruct(const EndPointStruct& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EndPointStruct::SharedCtor() {
  _cached_size_ = 0;
  ip_ = 0u;
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EndPointStruct::~EndPointStruct() {
  SharedDtor();
}

void EndPointStruct::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EndPointStruct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EndPointStruct::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EndPointStruct_descriptor_;
}

const EndPointStruct& EndPointStruct::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

EndPointStruct* EndPointStruct::default_instance_ = NULL;

EndPointStruct* EndPointStruct::New() const {
  return new EndPointStruct;
}

void EndPointStruct::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ip_ = 0u;
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EndPointStruct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }
      
      // optional uint32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EndPointStruct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ip(), output);
  }
  
  // optional uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EndPointStruct::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ip = 1;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ip(), target);
  }
  
  // optional uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EndPointStruct::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }
    
    // optional uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndPointStruct::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EndPointStruct* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EndPointStruct*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EndPointStruct::MergeFrom(const EndPointStruct& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EndPointStruct::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndPointStruct::CopyFrom(const EndPointStruct& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndPointStruct::IsInitialized() const {
  
  return true;
}

void EndPointStruct::Swap(EndPointStruct* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EndPointStruct::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EndPointStruct_descriptor_;
  metadata.reflection = EndPointStruct_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BtKeepAliveMsg::kDomainFieldNumber;
#endif  // !_MSC_VER

BtKeepAliveMsg::BtKeepAliveMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BtKeepAliveMsg::InitAsDefaultInstance() {
}

BtKeepAliveMsg::BtKeepAliveMsg(const BtKeepAliveMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BtKeepAliveMsg::SharedCtor() {
  _cached_size_ = 0;
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BtKeepAliveMsg::~BtKeepAliveMsg() {
  SharedDtor();
}

void BtKeepAliveMsg::SharedDtor() {
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_;
  }
  if (this != default_instance_) {
  }
}

void BtKeepAliveMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BtKeepAliveMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BtKeepAliveMsg_descriptor_;
}

const BtKeepAliveMsg& BtKeepAliveMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

BtKeepAliveMsg* BtKeepAliveMsg::default_instance_ = NULL;

BtKeepAliveMsg* BtKeepAliveMsg::New() const {
  return new BtKeepAliveMsg;
}

void BtKeepAliveMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::kEmptyString) {
        domain_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BtKeepAliveMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string domain = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BtKeepAliveMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->domain(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BtKeepAliveMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->domain(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BtKeepAliveMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string domain = 1;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BtKeepAliveMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BtKeepAliveMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BtKeepAliveMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BtKeepAliveMsg::MergeFrom(const BtKeepAliveMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_domain()) {
      set_domain(from.domain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BtKeepAliveMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BtKeepAliveMsg::CopyFrom(const BtKeepAliveMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BtKeepAliveMsg::IsInitialized() const {
  
  return true;
}

void BtKeepAliveMsg::Swap(BtKeepAliveMsg* other) {
  if (other != this) {
    std::swap(domain_, other->domain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BtKeepAliveMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BtKeepAliveMsg_descriptor_;
  metadata.reflection = BtKeepAliveMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BtReportResourceMsg::kDomainFieldNumber;
const int BtReportResourceMsg::kInfoHashFieldNumber;
#endif  // !_MSC_VER

BtReportResourceMsg::BtReportResourceMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BtReportResourceMsg::InitAsDefaultInstance() {
}

BtReportResourceMsg::BtReportResourceMsg(const BtReportResourceMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BtReportResourceMsg::SharedCtor() {
  _cached_size_ = 0;
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BtReportResourceMsg::~BtReportResourceMsg() {
  SharedDtor();
}

void BtReportResourceMsg::SharedDtor() {
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_;
  }
  if (this != default_instance_) {
  }
}

void BtReportResourceMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BtReportResourceMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BtReportResourceMsg_descriptor_;
}

const BtReportResourceMsg& BtReportResourceMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

BtReportResourceMsg* BtReportResourceMsg::default_instance_ = NULL;

BtReportResourceMsg* BtReportResourceMsg::New() const {
  return new BtReportResourceMsg;
}

void BtReportResourceMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::kEmptyString) {
        domain_->clear();
      }
    }
  }
  info_hash_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BtReportResourceMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string domain = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info_hash;
        break;
      }
      
      // repeated bytes info_hash = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_info_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info_hash;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BtReportResourceMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->domain(), output);
  }
  
  // repeated bytes info_hash = 2;
  for (int i = 0; i < this->info_hash_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->info_hash(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BtReportResourceMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->domain(), target);
  }
  
  // repeated bytes info_hash = 2;
  for (int i = 0; i < this->info_hash_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->info_hash(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BtReportResourceMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string domain = 1;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }
    
  }
  // repeated bytes info_hash = 2;
  total_size += 1 * this->info_hash_size();
  for (int i = 0; i < this->info_hash_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->info_hash(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BtReportResourceMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BtReportResourceMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BtReportResourceMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BtReportResourceMsg::MergeFrom(const BtReportResourceMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_hash_.MergeFrom(from.info_hash_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_domain()) {
      set_domain(from.domain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BtReportResourceMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BtReportResourceMsg::CopyFrom(const BtReportResourceMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BtReportResourceMsg::IsInitialized() const {
  
  return true;
}

void BtReportResourceMsg::Swap(BtReportResourceMsg* other) {
  if (other != this) {
    std::swap(domain_, other->domain_);
    info_hash_.Swap(&other->info_hash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BtReportResourceMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BtReportResourceMsg_descriptor_;
  metadata.reflection = BtReportResourceMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BtReportServiceAddressMsg::kDomainFieldNumber;
const int BtReportServiceAddressMsg::kRcsFieldNumber;
#endif  // !_MSC_VER

BtReportServiceAddressMsg::BtReportServiceAddressMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BtReportServiceAddressMsg::InitAsDefaultInstance() {
}

BtReportServiceAddressMsg::BtReportServiceAddressMsg(const BtReportServiceAddressMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BtReportServiceAddressMsg::SharedCtor() {
  _cached_size_ = 0;
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BtReportServiceAddressMsg::~BtReportServiceAddressMsg() {
  SharedDtor();
}

void BtReportServiceAddressMsg::SharedDtor() {
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_;
  }
  if (this != default_instance_) {
  }
}

void BtReportServiceAddressMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BtReportServiceAddressMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BtReportServiceAddressMsg_descriptor_;
}

const BtReportServiceAddressMsg& BtReportServiceAddressMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

BtReportServiceAddressMsg* BtReportServiceAddressMsg::default_instance_ = NULL;

BtReportServiceAddressMsg* BtReportServiceAddressMsg::New() const {
  return new BtReportServiceAddressMsg;
}

void BtReportServiceAddressMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::kEmptyString) {
        domain_->clear();
      }
    }
  }
  rcs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BtReportServiceAddressMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string domain = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rcs;
        break;
      }
      
      // repeated .BroadCache.EndPointStruct rcs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rcs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rcs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rcs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BtReportServiceAddressMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->domain(), output);
  }
  
  // repeated .BroadCache.EndPointStruct rcs = 2;
  for (int i = 0; i < this->rcs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rcs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BtReportServiceAddressMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->domain(), target);
  }
  
  // repeated .BroadCache.EndPointStruct rcs = 2;
  for (int i = 0; i < this->rcs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rcs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BtReportServiceAddressMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string domain = 1;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }
    
  }
  // repeated .BroadCache.EndPointStruct rcs = 2;
  total_size += 1 * this->rcs_size();
  for (int i = 0; i < this->rcs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rcs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BtReportServiceAddressMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BtReportServiceAddressMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BtReportServiceAddressMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BtReportServiceAddressMsg::MergeFrom(const BtReportServiceAddressMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  rcs_.MergeFrom(from.rcs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_domain()) {
      set_domain(from.domain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BtReportServiceAddressMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BtReportServiceAddressMsg::CopyFrom(const BtReportServiceAddressMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BtReportServiceAddressMsg::IsInitialized() const {
  
  return true;
}

void BtReportServiceAddressMsg::Swap(BtReportServiceAddressMsg* other) {
  if (other != this) {
    std::swap(domain_, other->domain_);
    rcs_.Swap(&other->rcs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BtReportServiceAddressMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BtReportServiceAddressMsg_descriptor_;
  metadata.reflection = BtReportServiceAddressMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BtRequestTrackerMsg::kDomainFieldNumber;
const int BtRequestTrackerMsg::kTrackerTypeFieldNumber;
const int BtRequestTrackerMsg::kInfoHashFieldNumber;
#endif  // !_MSC_VER

BtRequestTrackerMsg::BtRequestTrackerMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BtRequestTrackerMsg::InitAsDefaultInstance() {
}

BtRequestTrackerMsg::BtRequestTrackerMsg(const BtRequestTrackerMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BtRequestTrackerMsg::SharedCtor() {
  _cached_size_ = 0;
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tracker_type_ = 0;
  info_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BtRequestTrackerMsg::~BtRequestTrackerMsg() {
  SharedDtor();
}

void BtRequestTrackerMsg::SharedDtor() {
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_;
  }
  if (info_hash_ != &::google::protobuf::internal::kEmptyString) {
    delete info_hash_;
  }
  if (this != default_instance_) {
  }
}

void BtRequestTrackerMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BtRequestTrackerMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BtRequestTrackerMsg_descriptor_;
}

const BtRequestTrackerMsg& BtRequestTrackerMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

BtRequestTrackerMsg* BtRequestTrackerMsg::default_instance_ = NULL;

BtRequestTrackerMsg* BtRequestTrackerMsg::New() const {
  return new BtRequestTrackerMsg;
}

void BtRequestTrackerMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::kEmptyString) {
        domain_->clear();
      }
    }
    tracker_type_ = 0;
    if (has_info_hash()) {
      if (info_hash_ != &::google::protobuf::internal::kEmptyString) {
        info_hash_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BtRequestTrackerMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string domain = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tracker_type;
        break;
      }
      
      // optional .BroadCache.TrackerType tracker_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tracker_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (BroadCache::TrackerType_IsValid(value)) {
            set_tracker_type(static_cast< BroadCache::TrackerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info_hash;
        break;
      }
      
      // optional bytes info_hash = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_info_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BtRequestTrackerMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->domain(), output);
  }
  
  // optional .BroadCache.TrackerType tracker_type = 2;
  if (has_tracker_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->tracker_type(), output);
  }
  
  // optional bytes info_hash = 3;
  if (has_info_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->info_hash(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BtRequestTrackerMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->domain(), target);
  }
  
  // optional .BroadCache.TrackerType tracker_type = 2;
  if (has_tracker_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->tracker_type(), target);
  }
  
  // optional bytes info_hash = 3;
  if (has_info_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->info_hash(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BtRequestTrackerMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string domain = 1;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }
    
    // optional .BroadCache.TrackerType tracker_type = 2;
    if (has_tracker_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tracker_type());
    }
    
    // optional bytes info_hash = 3;
    if (has_info_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->info_hash());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BtRequestTrackerMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BtRequestTrackerMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BtRequestTrackerMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BtRequestTrackerMsg::MergeFrom(const BtRequestTrackerMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_domain()) {
      set_domain(from.domain());
    }
    if (from.has_tracker_type()) {
      set_tracker_type(from.tracker_type());
    }
    if (from.has_info_hash()) {
      set_info_hash(from.info_hash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BtRequestTrackerMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BtRequestTrackerMsg::CopyFrom(const BtRequestTrackerMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BtRequestTrackerMsg::IsInitialized() const {
  
  return true;
}

void BtRequestTrackerMsg::Swap(BtRequestTrackerMsg* other) {
  if (other != this) {
    std::swap(domain_, other->domain_);
    std::swap(tracker_type_, other->tracker_type_);
    std::swap(info_hash_, other->info_hash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BtRequestTrackerMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BtRequestTrackerMsg_descriptor_;
  metadata.reflection = BtRequestTrackerMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BtReplyTrackerMsg::kDomainFieldNumber;
const int BtReplyTrackerMsg::kTrackerTypeFieldNumber;
const int BtReplyTrackerMsg::kInfoHashFieldNumber;
const int BtReplyTrackerMsg::kTrackerFieldNumber;
#endif  // !_MSC_VER

BtReplyTrackerMsg::BtReplyTrackerMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BtReplyTrackerMsg::InitAsDefaultInstance() {
}

BtReplyTrackerMsg::BtReplyTrackerMsg(const BtReplyTrackerMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BtReplyTrackerMsg::SharedCtor() {
  _cached_size_ = 0;
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tracker_type_ = 0;
  info_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BtReplyTrackerMsg::~BtReplyTrackerMsg() {
  SharedDtor();
}

void BtReplyTrackerMsg::SharedDtor() {
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_;
  }
  if (info_hash_ != &::google::protobuf::internal::kEmptyString) {
    delete info_hash_;
  }
  if (this != default_instance_) {
  }
}

void BtReplyTrackerMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BtReplyTrackerMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BtReplyTrackerMsg_descriptor_;
}

const BtReplyTrackerMsg& BtReplyTrackerMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

BtReplyTrackerMsg* BtReplyTrackerMsg::default_instance_ = NULL;

BtReplyTrackerMsg* BtReplyTrackerMsg::New() const {
  return new BtReplyTrackerMsg;
}

void BtReplyTrackerMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::kEmptyString) {
        domain_->clear();
      }
    }
    tracker_type_ = 0;
    if (has_info_hash()) {
      if (info_hash_ != &::google::protobuf::internal::kEmptyString) {
        info_hash_->clear();
      }
    }
  }
  tracker_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BtReplyTrackerMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string domain = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tracker_type;
        break;
      }
      
      // optional .BroadCache.TrackerType tracker_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tracker_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (BroadCache::TrackerType_IsValid(value)) {
            set_tracker_type(static_cast< BroadCache::TrackerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info_hash;
        break;
      }
      
      // optional bytes info_hash = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_info_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tracker;
        break;
      }
      
      // repeated .BroadCache.EndPointStruct tracker = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tracker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tracker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tracker;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BtReplyTrackerMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->domain(), output);
  }
  
  // optional .BroadCache.TrackerType tracker_type = 2;
  if (has_tracker_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->tracker_type(), output);
  }
  
  // optional bytes info_hash = 3;
  if (has_info_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->info_hash(), output);
  }
  
  // repeated .BroadCache.EndPointStruct tracker = 4;
  for (int i = 0; i < this->tracker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tracker(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BtReplyTrackerMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->domain(), target);
  }
  
  // optional .BroadCache.TrackerType tracker_type = 2;
  if (has_tracker_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->tracker_type(), target);
  }
  
  // optional bytes info_hash = 3;
  if (has_info_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->info_hash(), target);
  }
  
  // repeated .BroadCache.EndPointStruct tracker = 4;
  for (int i = 0; i < this->tracker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tracker(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BtReplyTrackerMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string domain = 1;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }
    
    // optional .BroadCache.TrackerType tracker_type = 2;
    if (has_tracker_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tracker_type());
    }
    
    // optional bytes info_hash = 3;
    if (has_info_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->info_hash());
    }
    
  }
  // repeated .BroadCache.EndPointStruct tracker = 4;
  total_size += 1 * this->tracker_size();
  for (int i = 0; i < this->tracker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tracker(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BtReplyTrackerMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BtReplyTrackerMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BtReplyTrackerMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BtReplyTrackerMsg::MergeFrom(const BtReplyTrackerMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  tracker_.MergeFrom(from.tracker_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_domain()) {
      set_domain(from.domain());
    }
    if (from.has_tracker_type()) {
      set_tracker_type(from.tracker_type());
    }
    if (from.has_info_hash()) {
      set_info_hash(from.info_hash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BtReplyTrackerMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BtReplyTrackerMsg::CopyFrom(const BtReplyTrackerMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BtReplyTrackerMsg::IsInitialized() const {
  
  return true;
}

void BtReplyTrackerMsg::Swap(BtReplyTrackerMsg* other) {
  if (other != this) {
    std::swap(domain_, other->domain_);
    std::swap(tracker_type_, other->tracker_type_);
    std::swap(info_hash_, other->info_hash_);
    tracker_.Swap(&other->tracker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BtReplyTrackerMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BtReplyTrackerMsg_descriptor_;
  metadata.reflection = BtReplyTrackerMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BtRequestProxyMsg::kDomainFieldNumber;
const int BtRequestProxyMsg::kRcsTypeFieldNumber;
const int BtRequestProxyMsg::kInfoHashFieldNumber;
const int BtRequestProxyMsg::kNumWantFieldNumber;
#endif  // !_MSC_VER

BtRequestProxyMsg::BtRequestProxyMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BtRequestProxyMsg::InitAsDefaultInstance() {
}

BtRequestProxyMsg::BtRequestProxyMsg(const BtRequestProxyMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BtRequestProxyMsg::SharedCtor() {
  _cached_size_ = 0;
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rcs_type_ = 0;
  info_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  num_want_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BtRequestProxyMsg::~BtRequestProxyMsg() {
  SharedDtor();
}

void BtRequestProxyMsg::SharedDtor() {
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_;
  }
  if (info_hash_ != &::google::protobuf::internal::kEmptyString) {
    delete info_hash_;
  }
  if (this != default_instance_) {
  }
}

void BtRequestProxyMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BtRequestProxyMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BtRequestProxyMsg_descriptor_;
}

const BtRequestProxyMsg& BtRequestProxyMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

BtRequestProxyMsg* BtRequestProxyMsg::default_instance_ = NULL;

BtRequestProxyMsg* BtRequestProxyMsg::New() const {
  return new BtRequestProxyMsg;
}

void BtRequestProxyMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::kEmptyString) {
        domain_->clear();
      }
    }
    rcs_type_ = 0;
    if (has_info_hash()) {
      if (info_hash_ != &::google::protobuf::internal::kEmptyString) {
        info_hash_->clear();
      }
    }
    num_want_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BtRequestProxyMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string domain = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rcs_type;
        break;
      }
      
      // optional .BroadCache.RcsType rcs_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rcs_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (BroadCache::RcsType_IsValid(value)) {
            set_rcs_type(static_cast< BroadCache::RcsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info_hash;
        break;
      }
      
      // optional bytes info_hash = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_info_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num_want;
        break;
      }
      
      // optional uint32 num_want = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_want:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_want_)));
          set_has_num_want();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BtRequestProxyMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->domain(), output);
  }
  
  // optional .BroadCache.RcsType rcs_type = 2;
  if (has_rcs_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->rcs_type(), output);
  }
  
  // optional bytes info_hash = 3;
  if (has_info_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->info_hash(), output);
  }
  
  // optional uint32 num_want = 4;
  if (has_num_want()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num_want(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BtRequestProxyMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->domain(), target);
  }
  
  // optional .BroadCache.RcsType rcs_type = 2;
  if (has_rcs_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->rcs_type(), target);
  }
  
  // optional bytes info_hash = 3;
  if (has_info_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->info_hash(), target);
  }
  
  // optional uint32 num_want = 4;
  if (has_num_want()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num_want(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BtRequestProxyMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string domain = 1;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }
    
    // optional .BroadCache.RcsType rcs_type = 2;
    if (has_rcs_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rcs_type());
    }
    
    // optional bytes info_hash = 3;
    if (has_info_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->info_hash());
    }
    
    // optional uint32 num_want = 4;
    if (has_num_want()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_want());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BtRequestProxyMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BtRequestProxyMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BtRequestProxyMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BtRequestProxyMsg::MergeFrom(const BtRequestProxyMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_domain()) {
      set_domain(from.domain());
    }
    if (from.has_rcs_type()) {
      set_rcs_type(from.rcs_type());
    }
    if (from.has_info_hash()) {
      set_info_hash(from.info_hash());
    }
    if (from.has_num_want()) {
      set_num_want(from.num_want());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BtRequestProxyMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BtRequestProxyMsg::CopyFrom(const BtRequestProxyMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BtRequestProxyMsg::IsInitialized() const {
  
  return true;
}

void BtRequestProxyMsg::Swap(BtRequestProxyMsg* other) {
  if (other != this) {
    std::swap(domain_, other->domain_);
    std::swap(rcs_type_, other->rcs_type_);
    std::swap(info_hash_, other->info_hash_);
    std::swap(num_want_, other->num_want_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BtRequestProxyMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BtRequestProxyMsg_descriptor_;
  metadata.reflection = BtRequestProxyMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BtReplyProxyMsg::kDomainFieldNumber;
const int BtReplyProxyMsg::kRcsTypeFieldNumber;
const int BtReplyProxyMsg::kInfoHashFieldNumber;
const int BtReplyProxyMsg::kProxyFieldNumber;
#endif  // !_MSC_VER

BtReplyProxyMsg::BtReplyProxyMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BtReplyProxyMsg::InitAsDefaultInstance() {
}

BtReplyProxyMsg::BtReplyProxyMsg(const BtReplyProxyMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BtReplyProxyMsg::SharedCtor() {
  _cached_size_ = 0;
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rcs_type_ = 0;
  info_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BtReplyProxyMsg::~BtReplyProxyMsg() {
  SharedDtor();
}

void BtReplyProxyMsg::SharedDtor() {
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_;
  }
  if (info_hash_ != &::google::protobuf::internal::kEmptyString) {
    delete info_hash_;
  }
  if (this != default_instance_) {
  }
}

void BtReplyProxyMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BtReplyProxyMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BtReplyProxyMsg_descriptor_;
}

const BtReplyProxyMsg& BtReplyProxyMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

BtReplyProxyMsg* BtReplyProxyMsg::default_instance_ = NULL;

BtReplyProxyMsg* BtReplyProxyMsg::New() const {
  return new BtReplyProxyMsg;
}

void BtReplyProxyMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::kEmptyString) {
        domain_->clear();
      }
    }
    rcs_type_ = 0;
    if (has_info_hash()) {
      if (info_hash_ != &::google::protobuf::internal::kEmptyString) {
        info_hash_->clear();
      }
    }
  }
  proxy_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BtReplyProxyMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string domain = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rcs_type;
        break;
      }
      
      // optional .BroadCache.RcsType rcs_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rcs_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (BroadCache::RcsType_IsValid(value)) {
            set_rcs_type(static_cast< BroadCache::RcsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info_hash;
        break;
      }
      
      // optional bytes info_hash = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_info_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_proxy;
        break;
      }
      
      // repeated .BroadCache.EndPointStruct proxy = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proxy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_proxy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_proxy;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BtReplyProxyMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->domain(), output);
  }
  
  // optional .BroadCache.RcsType rcs_type = 2;
  if (has_rcs_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->rcs_type(), output);
  }
  
  // optional bytes info_hash = 3;
  if (has_info_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->info_hash(), output);
  }
  
  // repeated .BroadCache.EndPointStruct proxy = 4;
  for (int i = 0; i < this->proxy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->proxy(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BtReplyProxyMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->domain(), target);
  }
  
  // optional .BroadCache.RcsType rcs_type = 2;
  if (has_rcs_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->rcs_type(), target);
  }
  
  // optional bytes info_hash = 3;
  if (has_info_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->info_hash(), target);
  }
  
  // repeated .BroadCache.EndPointStruct proxy = 4;
  for (int i = 0; i < this->proxy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->proxy(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BtReplyProxyMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string domain = 1;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }
    
    // optional .BroadCache.RcsType rcs_type = 2;
    if (has_rcs_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rcs_type());
    }
    
    // optional bytes info_hash = 3;
    if (has_info_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->info_hash());
    }
    
  }
  // repeated .BroadCache.EndPointStruct proxy = 4;
  total_size += 1 * this->proxy_size();
  for (int i = 0; i < this->proxy_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->proxy(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BtReplyProxyMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BtReplyProxyMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BtReplyProxyMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BtReplyProxyMsg::MergeFrom(const BtReplyProxyMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  proxy_.MergeFrom(from.proxy_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_domain()) {
      set_domain(from.domain());
    }
    if (from.has_rcs_type()) {
      set_rcs_type(from.rcs_type());
    }
    if (from.has_info_hash()) {
      set_info_hash(from.info_hash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BtReplyProxyMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BtReplyProxyMsg::CopyFrom(const BtReplyProxyMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BtReplyProxyMsg::IsInitialized() const {
  
  return true;
}

void BtReplyProxyMsg::Swap(BtReplyProxyMsg* other) {
  if (other != this) {
    std::swap(domain_, other->domain_);
    std::swap(rcs_type_, other->rcs_type_);
    std::swap(info_hash_, other->info_hash_);
    proxy_.Swap(&other->proxy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BtReplyProxyMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BtReplyProxyMsg_descriptor_;
  metadata.reflection = BtReplyProxyMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PpsKeepAliveMsg::kDomainFieldNumber;
#endif  // !_MSC_VER

PpsKeepAliveMsg::PpsKeepAliveMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PpsKeepAliveMsg::InitAsDefaultInstance() {
}

PpsKeepAliveMsg::PpsKeepAliveMsg(const PpsKeepAliveMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PpsKeepAliveMsg::SharedCtor() {
  _cached_size_ = 0;
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PpsKeepAliveMsg::~PpsKeepAliveMsg() {
  SharedDtor();
}

void PpsKeepAliveMsg::SharedDtor() {
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_;
  }
  if (this != default_instance_) {
  }
}

void PpsKeepAliveMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PpsKeepAliveMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PpsKeepAliveMsg_descriptor_;
}

const PpsKeepAliveMsg& PpsKeepAliveMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

PpsKeepAliveMsg* PpsKeepAliveMsg::default_instance_ = NULL;

PpsKeepAliveMsg* PpsKeepAliveMsg::New() const {
  return new PpsKeepAliveMsg;
}

void PpsKeepAliveMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::kEmptyString) {
        domain_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PpsKeepAliveMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string domain = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PpsKeepAliveMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->domain(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PpsKeepAliveMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->domain(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PpsKeepAliveMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string domain = 1;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PpsKeepAliveMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PpsKeepAliveMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PpsKeepAliveMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PpsKeepAliveMsg::MergeFrom(const PpsKeepAliveMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_domain()) {
      set_domain(from.domain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PpsKeepAliveMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PpsKeepAliveMsg::CopyFrom(const PpsKeepAliveMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PpsKeepAliveMsg::IsInitialized() const {
  
  return true;
}

void PpsKeepAliveMsg::Swap(PpsKeepAliveMsg* other) {
  if (other != this) {
    std::swap(domain_, other->domain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PpsKeepAliveMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PpsKeepAliveMsg_descriptor_;
  metadata.reflection = PpsKeepAliveMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PpsReportResourceMsg::kDomainFieldNumber;
const int PpsReportResourceMsg::kInfoHashFieldNumber;
#endif  // !_MSC_VER

PpsReportResourceMsg::PpsReportResourceMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PpsReportResourceMsg::InitAsDefaultInstance() {
}

PpsReportResourceMsg::PpsReportResourceMsg(const PpsReportResourceMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PpsReportResourceMsg::SharedCtor() {
  _cached_size_ = 0;
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PpsReportResourceMsg::~PpsReportResourceMsg() {
  SharedDtor();
}

void PpsReportResourceMsg::SharedDtor() {
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_;
  }
  if (this != default_instance_) {
  }
}

void PpsReportResourceMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PpsReportResourceMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PpsReportResourceMsg_descriptor_;
}

const PpsReportResourceMsg& PpsReportResourceMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

PpsReportResourceMsg* PpsReportResourceMsg::default_instance_ = NULL;

PpsReportResourceMsg* PpsReportResourceMsg::New() const {
  return new PpsReportResourceMsg;
}

void PpsReportResourceMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::kEmptyString) {
        domain_->clear();
      }
    }
  }
  info_hash_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PpsReportResourceMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string domain = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info_hash;
        break;
      }
      
      // repeated bytes info_hash = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_info_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info_hash;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PpsReportResourceMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->domain(), output);
  }
  
  // repeated bytes info_hash = 2;
  for (int i = 0; i < this->info_hash_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->info_hash(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PpsReportResourceMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->domain(), target);
  }
  
  // repeated bytes info_hash = 2;
  for (int i = 0; i < this->info_hash_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->info_hash(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PpsReportResourceMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string domain = 1;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }
    
  }
  // repeated bytes info_hash = 2;
  total_size += 1 * this->info_hash_size();
  for (int i = 0; i < this->info_hash_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->info_hash(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PpsReportResourceMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PpsReportResourceMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PpsReportResourceMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PpsReportResourceMsg::MergeFrom(const PpsReportResourceMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_hash_.MergeFrom(from.info_hash_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_domain()) {
      set_domain(from.domain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PpsReportResourceMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PpsReportResourceMsg::CopyFrom(const PpsReportResourceMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PpsReportResourceMsg::IsInitialized() const {
  
  return true;
}

void PpsReportResourceMsg::Swap(PpsReportResourceMsg* other) {
  if (other != this) {
    std::swap(domain_, other->domain_);
    info_hash_.Swap(&other->info_hash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PpsReportResourceMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PpsReportResourceMsg_descriptor_;
  metadata.reflection = PpsReportResourceMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PpsReportServiceAddressMsg::kDomainFieldNumber;
const int PpsReportServiceAddressMsg::kRcsFieldNumber;
#endif  // !_MSC_VER

PpsReportServiceAddressMsg::PpsReportServiceAddressMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PpsReportServiceAddressMsg::InitAsDefaultInstance() {
}

PpsReportServiceAddressMsg::PpsReportServiceAddressMsg(const PpsReportServiceAddressMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PpsReportServiceAddressMsg::SharedCtor() {
  _cached_size_ = 0;
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PpsReportServiceAddressMsg::~PpsReportServiceAddressMsg() {
  SharedDtor();
}

void PpsReportServiceAddressMsg::SharedDtor() {
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_;
  }
  if (this != default_instance_) {
  }
}

void PpsReportServiceAddressMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PpsReportServiceAddressMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PpsReportServiceAddressMsg_descriptor_;
}

const PpsReportServiceAddressMsg& PpsReportServiceAddressMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

PpsReportServiceAddressMsg* PpsReportServiceAddressMsg::default_instance_ = NULL;

PpsReportServiceAddressMsg* PpsReportServiceAddressMsg::New() const {
  return new PpsReportServiceAddressMsg;
}

void PpsReportServiceAddressMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::kEmptyString) {
        domain_->clear();
      }
    }
  }
  rcs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PpsReportServiceAddressMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string domain = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rcs;
        break;
      }
      
      // repeated .BroadCache.EndPointStruct rcs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rcs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rcs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rcs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PpsReportServiceAddressMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->domain(), output);
  }
  
  // repeated .BroadCache.EndPointStruct rcs = 2;
  for (int i = 0; i < this->rcs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rcs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PpsReportServiceAddressMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->domain(), target);
  }
  
  // repeated .BroadCache.EndPointStruct rcs = 2;
  for (int i = 0; i < this->rcs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rcs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PpsReportServiceAddressMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string domain = 1;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }
    
  }
  // repeated .BroadCache.EndPointStruct rcs = 2;
  total_size += 1 * this->rcs_size();
  for (int i = 0; i < this->rcs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rcs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PpsReportServiceAddressMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PpsReportServiceAddressMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PpsReportServiceAddressMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PpsReportServiceAddressMsg::MergeFrom(const PpsReportServiceAddressMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  rcs_.MergeFrom(from.rcs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_domain()) {
      set_domain(from.domain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PpsReportServiceAddressMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PpsReportServiceAddressMsg::CopyFrom(const PpsReportServiceAddressMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PpsReportServiceAddressMsg::IsInitialized() const {
  
  return true;
}

void PpsReportServiceAddressMsg::Swap(PpsReportServiceAddressMsg* other) {
  if (other != this) {
    std::swap(domain_, other->domain_);
    rcs_.Swap(&other->rcs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PpsReportServiceAddressMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PpsReportServiceAddressMsg_descriptor_;
  metadata.reflection = PpsReportServiceAddressMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PpsRequestTrackerMsg::kDomainFieldNumber;
const int PpsRequestTrackerMsg::kTrackerTypeFieldNumber;
const int PpsRequestTrackerMsg::kInfoHashFieldNumber;
#endif  // !_MSC_VER

PpsRequestTrackerMsg::PpsRequestTrackerMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PpsRequestTrackerMsg::InitAsDefaultInstance() {
}

PpsRequestTrackerMsg::PpsRequestTrackerMsg(const PpsRequestTrackerMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PpsRequestTrackerMsg::SharedCtor() {
  _cached_size_ = 0;
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tracker_type_ = 0;
  info_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PpsRequestTrackerMsg::~PpsRequestTrackerMsg() {
  SharedDtor();
}

void PpsRequestTrackerMsg::SharedDtor() {
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_;
  }
  if (info_hash_ != &::google::protobuf::internal::kEmptyString) {
    delete info_hash_;
  }
  if (this != default_instance_) {
  }
}

void PpsRequestTrackerMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PpsRequestTrackerMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PpsRequestTrackerMsg_descriptor_;
}

const PpsRequestTrackerMsg& PpsRequestTrackerMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

PpsRequestTrackerMsg* PpsRequestTrackerMsg::default_instance_ = NULL;

PpsRequestTrackerMsg* PpsRequestTrackerMsg::New() const {
  return new PpsRequestTrackerMsg;
}

void PpsRequestTrackerMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::kEmptyString) {
        domain_->clear();
      }
    }
    tracker_type_ = 0;
    if (has_info_hash()) {
      if (info_hash_ != &::google::protobuf::internal::kEmptyString) {
        info_hash_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PpsRequestTrackerMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string domain = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tracker_type;
        break;
      }
      
      // optional .BroadCache.TrackerType tracker_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tracker_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (BroadCache::TrackerType_IsValid(value)) {
            set_tracker_type(static_cast< BroadCache::TrackerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info_hash;
        break;
      }
      
      // optional bytes info_hash = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_info_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PpsRequestTrackerMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->domain(), output);
  }
  
  // optional .BroadCache.TrackerType tracker_type = 2;
  if (has_tracker_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->tracker_type(), output);
  }
  
  // optional bytes info_hash = 3;
  if (has_info_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->info_hash(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PpsRequestTrackerMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->domain(), target);
  }
  
  // optional .BroadCache.TrackerType tracker_type = 2;
  if (has_tracker_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->tracker_type(), target);
  }
  
  // optional bytes info_hash = 3;
  if (has_info_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->info_hash(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PpsRequestTrackerMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string domain = 1;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }
    
    // optional .BroadCache.TrackerType tracker_type = 2;
    if (has_tracker_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tracker_type());
    }
    
    // optional bytes info_hash = 3;
    if (has_info_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->info_hash());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PpsRequestTrackerMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PpsRequestTrackerMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PpsRequestTrackerMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PpsRequestTrackerMsg::MergeFrom(const PpsRequestTrackerMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_domain()) {
      set_domain(from.domain());
    }
    if (from.has_tracker_type()) {
      set_tracker_type(from.tracker_type());
    }
    if (from.has_info_hash()) {
      set_info_hash(from.info_hash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PpsRequestTrackerMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PpsRequestTrackerMsg::CopyFrom(const PpsRequestTrackerMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PpsRequestTrackerMsg::IsInitialized() const {
  
  return true;
}

void PpsRequestTrackerMsg::Swap(PpsRequestTrackerMsg* other) {
  if (other != this) {
    std::swap(domain_, other->domain_);
    std::swap(tracker_type_, other->tracker_type_);
    std::swap(info_hash_, other->info_hash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PpsRequestTrackerMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PpsRequestTrackerMsg_descriptor_;
  metadata.reflection = PpsRequestTrackerMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PpsReplyTrackerMsg::kDomainFieldNumber;
const int PpsReplyTrackerMsg::kTrackerTypeFieldNumber;
const int PpsReplyTrackerMsg::kInfoHashFieldNumber;
const int PpsReplyTrackerMsg::kTrackerFieldNumber;
#endif  // !_MSC_VER

PpsReplyTrackerMsg::PpsReplyTrackerMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PpsReplyTrackerMsg::InitAsDefaultInstance() {
}

PpsReplyTrackerMsg::PpsReplyTrackerMsg(const PpsReplyTrackerMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PpsReplyTrackerMsg::SharedCtor() {
  _cached_size_ = 0;
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tracker_type_ = 0;
  info_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PpsReplyTrackerMsg::~PpsReplyTrackerMsg() {
  SharedDtor();
}

void PpsReplyTrackerMsg::SharedDtor() {
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_;
  }
  if (info_hash_ != &::google::protobuf::internal::kEmptyString) {
    delete info_hash_;
  }
  if (this != default_instance_) {
  }
}

void PpsReplyTrackerMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PpsReplyTrackerMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PpsReplyTrackerMsg_descriptor_;
}

const PpsReplyTrackerMsg& PpsReplyTrackerMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

PpsReplyTrackerMsg* PpsReplyTrackerMsg::default_instance_ = NULL;

PpsReplyTrackerMsg* PpsReplyTrackerMsg::New() const {
  return new PpsReplyTrackerMsg;
}

void PpsReplyTrackerMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::kEmptyString) {
        domain_->clear();
      }
    }
    tracker_type_ = 0;
    if (has_info_hash()) {
      if (info_hash_ != &::google::protobuf::internal::kEmptyString) {
        info_hash_->clear();
      }
    }
  }
  tracker_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PpsReplyTrackerMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string domain = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tracker_type;
        break;
      }
      
      // optional .BroadCache.TrackerType tracker_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tracker_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (BroadCache::TrackerType_IsValid(value)) {
            set_tracker_type(static_cast< BroadCache::TrackerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info_hash;
        break;
      }
      
      // optional bytes info_hash = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_info_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tracker;
        break;
      }
      
      // repeated .BroadCache.EndPointStruct tracker = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tracker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tracker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tracker;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PpsReplyTrackerMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->domain(), output);
  }
  
  // optional .BroadCache.TrackerType tracker_type = 2;
  if (has_tracker_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->tracker_type(), output);
  }
  
  // optional bytes info_hash = 3;
  if (has_info_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->info_hash(), output);
  }
  
  // repeated .BroadCache.EndPointStruct tracker = 4;
  for (int i = 0; i < this->tracker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tracker(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PpsReplyTrackerMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->domain(), target);
  }
  
  // optional .BroadCache.TrackerType tracker_type = 2;
  if (has_tracker_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->tracker_type(), target);
  }
  
  // optional bytes info_hash = 3;
  if (has_info_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->info_hash(), target);
  }
  
  // repeated .BroadCache.EndPointStruct tracker = 4;
  for (int i = 0; i < this->tracker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tracker(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PpsReplyTrackerMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string domain = 1;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }
    
    // optional .BroadCache.TrackerType tracker_type = 2;
    if (has_tracker_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tracker_type());
    }
    
    // optional bytes info_hash = 3;
    if (has_info_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->info_hash());
    }
    
  }
  // repeated .BroadCache.EndPointStruct tracker = 4;
  total_size += 1 * this->tracker_size();
  for (int i = 0; i < this->tracker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tracker(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PpsReplyTrackerMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PpsReplyTrackerMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PpsReplyTrackerMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PpsReplyTrackerMsg::MergeFrom(const PpsReplyTrackerMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  tracker_.MergeFrom(from.tracker_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_domain()) {
      set_domain(from.domain());
    }
    if (from.has_tracker_type()) {
      set_tracker_type(from.tracker_type());
    }
    if (from.has_info_hash()) {
      set_info_hash(from.info_hash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PpsReplyTrackerMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PpsReplyTrackerMsg::CopyFrom(const PpsReplyTrackerMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PpsReplyTrackerMsg::IsInitialized() const {
  
  return true;
}

void PpsReplyTrackerMsg::Swap(PpsReplyTrackerMsg* other) {
  if (other != this) {
    std::swap(domain_, other->domain_);
    std::swap(tracker_type_, other->tracker_type_);
    std::swap(info_hash_, other->info_hash_);
    tracker_.Swap(&other->tracker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PpsReplyTrackerMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PpsReplyTrackerMsg_descriptor_;
  metadata.reflection = PpsReplyTrackerMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace BroadCache

// @@protoc_insertion_point(global_scope)
